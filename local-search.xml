<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>go 基础只是</title>
    <link href="/2021/06/22/GO/"/>
    <url>/2021/06/22/GO/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> path<br><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> 引入包安装目录 <br><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> tidy  //安装包<br><br><span class="hljs-built_in">go</span> 调度器  MPG 模型<br><br><span class="hljs-number">1.</span><span class="hljs-built_in">go</span>的安装跟gopath的设置<br><span class="hljs-number">2.</span><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span>介绍使用<br><span class="hljs-number">3.</span><span class="hljs-built_in">go</span>的调度器 MPG模型<br><span class="hljs-number">4.</span>channel goroutine简介<br><span class="hljs-number">5</span>.每分钟处理百万级请求 <br><span class="hljs-number">6.</span>web框架gin介绍<br><br></code></pre></td></tr></table></figure><p>Go 调度器 GMP 原理与调度</p><p>数组切片</p><p>map</p><p>struct 结构体</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//Go语言主要有四种类型的声明语句：var、const、type和func，</span><br><span class="hljs-comment">//分别对应变量、常量、类型和函数实体对象的声明</span><br><br><br><span class="hljs-comment">//一次性声明多个常量</span><br><span class="hljs-keyword">const</span> freezingF, boilingF = <span class="hljs-number">32.0</span>, <span class="hljs-number">212.0</span><br><br><br></code></pre></td></tr></table></figure><p>变量声明后，默认使用零值进行变量初始化</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组声明需要定义长度，也可以使用 … 定义自适应长度</p><p><strong>数组的索引值只能是 int</strong>，索引下标的范围是从0开始到数组长度减1的位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//数组声明</span><br><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>             <span class="hljs-comment">// array of 3 integers</span><br>fmt.Println(a[<span class="hljs-number">0</span>])        <span class="hljs-comment">// print the first element</span><br>fmt.Println(a[<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>]) <span class="hljs-comment">// print the last element, a[2]</span><br><br><br><span class="hljs-comment">//数组遍历</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, v)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>, v)<br>&#125;<br><br><br><span class="hljs-comment">//数组声明并初始化</span><br>q := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>b := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> go env</span>  <br><span class="hljs-meta">#</span><span class="bash">查看 GOROOT (go 安装目录,go 自带的包会在这个目录，如fmt 包)</span><br><span class="hljs-meta">#</span><span class="bash">GOPATH (go get 安装的包会在此目录)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> go env -w GO111MODULE=on   <span class="hljs-comment"># 打开 Go modules 开关</span></span><br><span class="hljs-meta">$</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct  <span class="hljs-comment">#设置 GOPROXY 代理</span></span><br></code></pre></td></tr></table></figure><p>GoLand  需要设置GOROOT 才会显示</p><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210119144217025.png" alt="image-20210119144217025"></p><ul><li>Go Modules 简介</li></ul><p>go-ini/ini   配置文件读取</p><p>gorm </p><p>net/http</p><p>gin</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">【github.com/<span class="hljs-keyword">go</span>-ini/ini】<br>【配置文件.ini】<br>【读取配置文件方法】<br><br>【错误码code】<br>【错误信息msg 文件】<br><br>【分页页码的获取方法】<br><br><br>**model 数据库模型 **<br><br>**编写路由文件 **<br><br></code></pre></td></tr></table></figure><p>go 定时任务</p><p>如何保证定时任务自动重启（守护进程如何配置 supervis）</p><p>项目初始化</p><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210427162611082.png" alt="image-20210427162611082"></p><h4 id="函数，方法"><a href="#函数，方法" class="headerlink" title="函数，方法"></a>函数，方法</h4><p>函数：</p><p>方法：在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// traditional function</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Distance</span><span class="hljs-params">(p, q Point)</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br><br><span class="hljs-comment">// same thing, but as a method of the Point type</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Point)</span> <span class="hljs-title">Distance</span><span class="hljs-params">(q Point)</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h4><ul><li>init函数先于main函数自动执行，不能被其他函数调用；</li><li>init函数没有输入参数、返回值；</li><li>每个包可以有多个init函数；</li><li><strong>包的每个源文件也可以有多个init函数</strong>，这点比较特殊；</li><li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。</li><li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main                       <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> T <span class="hljs-keyword">int64</span> = a()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;init in main.go &quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;calling a()&quot;</span>)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;                  <br>   fmt.Println(<span class="hljs-string">&quot;calling main&quot;</span>)     <br>&#125;<br><br><span class="hljs-comment">//结果</span><br>calling a()<br>init in main.<span class="hljs-keyword">go</span><br>calling main<br><span class="hljs-comment">// 初始化顺序：变量初始化-&gt;init()-&gt;main()</span><br></code></pre></td></tr></table></figure><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//定义结构体：（定义了一个person结构体）</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>city <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int8</span><br>&#125;<br><br><br><span class="hljs-comment">//-------实例化</span><br><br><span class="hljs-comment">//结构体实例化：只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</span><br><span class="hljs-keyword">var</span> p1 person<br>p1.name = <span class="hljs-string">&quot;沙河娜扎&quot;</span><br><br><span class="hljs-comment">//创建指针类型结构体</span><br><span class="hljs-keyword">var</span> p2 = <span class="hljs-built_in">new</span>(person)<br><br><span class="hljs-comment">//取结构体的地址实例化</span><br>p3 := &amp;person&#123;&#125;<br>p3.name = <span class="hljs-string">&quot;七米&quot;</span>   <span class="hljs-comment">// p3.name = &quot;七米&quot;其实在底层是 (*p3).name = &quot;七米&quot;</span><br><br><br><br><span class="hljs-comment">//----初始化</span><br><br><span class="hljs-comment">//没有初始化的结构体，其成员变量都是对应其类型的零值。</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>city <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int8</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> p4 person<br>fmt.Printf(<span class="hljs-string">&quot;p4=%#v\n&quot;</span>, p4) <span class="hljs-comment">//p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br>&#125;<br><br><span class="hljs-comment">//键值对初始化</span><br>p5 := person&#123;<br>name: <span class="hljs-string">&quot;小王子&quot;</span>,<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//结构体指针进行键值对初始化</span><br>p6 := &amp;person&#123;<br>name: <span class="hljs-string">&quot;小王子&quot;</span>,<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//省略字段初始化</span><br>p7 := &amp;person&#123;<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>&#125;<br><br><br><span class="hljs-comment">//使用值的列表初始化</span><br><span class="hljs-comment">//必须初始化结构体的所有字段。</span><br><span class="hljs-comment">//初始值的填充顺序必须与字段在结构体中的声明顺序一致。</span><br><span class="hljs-comment">//该方式不能和键值初始化方式混用。</span><br>p8 := &amp;person&#123;<br><span class="hljs-string">&quot;沙河娜扎&quot;</span>,<br><span class="hljs-string">&quot;北京&quot;</span>,<br><span class="hljs-number">28</span>,<br>&#125;<br><br><br><span class="hljs-comment">//空结构体是不占用空间的。</span><br><span class="hljs-keyword">var</span> v <span class="hljs-keyword">struct</span>&#123;&#125;<br>fmt.Println(unsafe.Sizeof(v))  <span class="hljs-comment">// 0</span><br><br><br></code></pre></td></tr></table></figure><p>思考</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> student <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*student)<br>stus := []student&#123;<br>&#123;name: <span class="hljs-string">&quot;小王子&quot;</span>, age: <span class="hljs-number">18</span>&#125;,<br>&#123;name: <span class="hljs-string">&quot;娜扎&quot;</span>, age: <span class="hljs-number">23</span>&#125;,<br>&#123;name: <span class="hljs-string">&quot;大王八&quot;</span>, age: <span class="hljs-number">9000</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, stu := <span class="hljs-keyword">range</span> stus &#123;<br>m[stu.name] = &amp;stu<br>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>fmt.Println(k, <span class="hljs-string">&quot;=&gt;&quot;</span>, v.name)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p><code>&amp;</code>（取地址，即指针）和<code>*</code>（根据地址取值，即指针取值）</p><p>取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">10</span><br>b := &amp;a<br>    fmt.Println(b)  <span class="hljs-comment">// 0xc00000a0c0  (&amp;取地址)</span><br>c := *b <span class="hljs-comment">// 指针取值（根据指针去内存取值）</span><br>fmt.Println(c) <span class="hljs-comment">// 10 （*根据地址取值）</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>引用类型的变量</strong>，我们在使用的时候不仅要<strong>声明它</strong>，还要为它<strong>分配内存</strong>空间，否则我们的值就没办法存储</p><p>而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存。</p><h3 id="new与make的区别"><a href="#new与make的区别" class="headerlink" title="new与make的区别"></a>new与make的区别</h3><ol><li>二者都是用来做内存分配的。</li><li>make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</li><li>而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</li></ol><h4 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h4><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//日志格式</span><br>log.SetFlags(log.Llongfile | log.Ltime | log.Ldate)<br>    <span class="hljs-comment">//日志前缀</span><br>log.SetPrefix(<span class="hljs-string">&quot;[小黑子]&quot;</span>)<br>    <span class="hljs-comment">//日志输出位置</span><br>logFile,err := os.OpenFile(<span class="hljs-string">&quot;junior.log&quot;</span>,os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0644</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>log.SetOutput(logFile)<br>    <span class="hljs-comment">//打印日志</span><br>log.Println(<span class="hljs-string">&quot;这是一个普通日志&quot;</span>)<br><br><br><span class="hljs-comment">//自定义日志：输出位置，日志前缀，日志格式</span><br>logger := log.New(os.Stdout, <span class="hljs-string">&quot;&lt;New&gt;&quot;</span>, log.Lshortfile|log.Ldate|log.Ltime)<br>logger.Println(<span class="hljs-string">&quot;这是自定义的logger记录的日志。&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210506112305732.png" alt="image-20210506112305732"></p><h4 id="viper-go配置"><a href="#viper-go配置" class="headerlink" title="viper -go配置"></a>viper -go配置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//读取配置文件</span><br>viper.SetConfigFile(<span class="hljs-string">&quot;./config.toml&quot;</span>)<br>err := viper.ReadInConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-comment">//设置默认值</span><br>viper.SetDefault(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;junior&quot;</span>)<br><br><span class="hljs-comment">//获取配置值</span><br>res := viper.GetString(<span class="hljs-string">&quot;Postgres.Port&quot;</span>)<br>fmt.Printf(res)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logrus"><a href="#logrus" class="headerlink" title="logrus"></a>logrus</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>)<br><br><span class="hljs-comment">// 创建一个新的logger实例。可以创建任意多个。</span><br><span class="hljs-keyword">var</span> log = logrus.New()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 设置日志输出为os.Stdout:输出到控制台</span><br>log.Out = os.Stdout<br><br><span class="hljs-comment">// 设置日志输出到文件</span><br>file, err := os.OpenFile(<span class="hljs-string">&quot;logrus.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>log.Out = file<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Info(<span class="hljs-string">&quot;Failed to log to file, using default stderr&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//打印日志</span><br>log.WithFields(logrus.Fields&#123;<br><span class="hljs-string">&quot;animal&quot;</span>: <span class="hljs-string">&quot;dog&quot;</span>,<br><span class="hljs-string">&quot;size&quot;</span>:   <span class="hljs-number">10</span>,<br>&#125;).Info(<span class="hljs-string">&quot;一群舔狗出现了。&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logrus-hook函数例子"><a href="#logrus-hook函数例子" class="headerlink" title="logrus - hook函数例子"></a>logrus - hook函数例子</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>   <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   log.AddHook(&amp;MyHook&#123;&#125;)<br>   log.Error(<span class="hljs-string">&quot;some errors\n&quot;</span>)<br>   log.Panic(<span class="hljs-string">&quot;some panic\n&quot;</span>)<br>   log.Print(<span class="hljs-string">&quot;hello world\n&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// MyHook ...</span><br><span class="hljs-keyword">type</span> MyHook <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-comment">// Levels 只定义 error 和 panic 等级的日志,其他日志等级不会触发 hook</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *MyHook)</span> <span class="hljs-title">Levels</span><span class="hljs-params">()</span> []<span class="hljs-title">log</span>.<span class="hljs-title">Level</span></span> &#123;<br>   <span class="hljs-keyword">return</span> []log.Level&#123;<br>      log.ErrorLevel,<br>      log.PanicLevel,<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// Fire 将异常日志写入到指定日志文件中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *MyHook)</span> <span class="hljs-title">Fire</span><span class="hljs-params">(entry *log.Entry)</span> <span class="hljs-title">error</span></span> &#123;<br>   f, err := os.OpenFile(<span class="hljs-string">&quot;err.log&quot;</span>, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="hljs-number">0644</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">if</span> _, err := f.Write([]<span class="hljs-keyword">byte</span>(entry.Message)); err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每次有error,panic 错误时，会写入 err.log 日志文件</strong><br><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210507110659074.png" alt="image-20210507110659074"></p><h4 id="path-filepath-操作路径"><a href="#path-filepath-操作路径" class="headerlink" title="path/filepath - 操作路径"></a>path/filepath - 操作路径</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">//路径拼接</span><br><span class="hljs-comment">//D:\WorkPlace\go\go_junior\storage\logs</span><br><span class="hljs-keyword">return</span> filepath.Join(storageDir(), <span class="hljs-string">&quot;logs&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">storageDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(appDir(), <span class="hljs-string">&quot;storage&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">//返回当前目录的根路径</span><br>    <span class="hljs-comment">//D:\WorkPlace\go\go_junior</span><br>path_, err := os.Getwd()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> path_<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>path := <span class="hljs-string">&quot;./dir1/dir2/tes.log&quot;</span><br><br>res := filepath.Dir(path)<span class="hljs-comment">//目录</span><br>res1 := filepath.Base(path)<span class="hljs-comment">//文件</span><br>res2 := filepath.Ext(path)<span class="hljs-comment">//文件后缀</span><br>fmt.Println(res)<br>fmt.Println(res1)<br>fmt.Println(res2)<br><br>res3, _ := filepath.Abs(path)<span class="hljs-comment">//绝对路径</span><br>fmt.Println(res3)<br>fmt.Println(filepath.IsAbs(path))<span class="hljs-comment">//是否是绝对路径</span><br>fmt.Println(filepath.Rel(<span class="hljs-string">&quot;./ceshi&quot;</span>, path))<span class="hljs-comment">//当前文件相对ceshi目录的相对路径 </span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="os-系统操作"><a href="#os-系统操作" class="headerlink" title="os - 系统操作"></a>os - 系统操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// os.MkdirAll 用于递归创建所有不存在的目录</span><br>_ = os.MkdirAll(storageDir(), os.ModePerm)<br>_ = os.MkdirAll(logDir(), os.ModePerm)<br>    <br>   <br>    <span class="hljs-comment">// 创建目录</span><br>    err = os.MkdirAll(dir+<span class="hljs-string">&quot;/new&quot;</span>, <span class="hljs-number">0755</span>)<br>    fmt.Println(err)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(storageDir(), <span class="hljs-string">&quot;logs&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">storageDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(appDir(), <span class="hljs-string">&quot;storage&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>path_, err := os.Getwd()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> path_<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World 这是标题</title>
    <link href="/2021/06/22/hello-world/"/>
    <url>/2021/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
