<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GO 问题汇总</title>
    <link href="/2021/08/09/GO%20%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2021/08/09/GO%20%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="GO-问题汇总"><a href="#GO-问题汇总" class="headerlink" title="GO 问题汇总"></a>GO 问题汇总</h1><h4 id="空指针报错"><a href="#空指针报错" class="headerlink" title="空指针报错"></a>空指针报错</h4><p><code>panic: runtime error: invalid memory address or nil pointer dereference</code></p><p>比如定义一个全局变量  var Db *gorm.DB</p><p>如果没有对 Db 赋值，就会报 nil pointer 错误</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/image-20210603201449868.png" alt="image-20210603201449868"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> db *gorm.DB<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//主函数里面使用的是局部变量， := 会声明变量并赋值</span><br>    db, err := gorm.Open(<span class="hljs-string">&quot;mysql&quot;</span>,<br>fmt.Sprintf(<span class="hljs-string">&quot;%s:%s@(%s)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>,<br>user, password, localhost, dbname))<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//方法里面使用的是 全局db</span><br>    questionList := <span class="hljs-built_in">make</span>([]BankQuestion, <span class="hljs-number">0</span>)<br>db.Table(<span class="hljs-string">&quot;t_bank_question&quot;</span>).Where(<br><span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;app_id&quot;</span>: appId, <span class="hljs-string">&quot;question_library_id&quot;</span>: library.Id, <span class="hljs-string">&quot;state&quot;</span>: <span class="hljs-number">0</span>&#125;).Find(&amp;questionList)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(questionList) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式缓存</title>
    <link href="/2021/08/04/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/"/>
    <url>/2021/08/04/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网的普及，内容信息越来越复杂，用户数和访问量越来越大，我们的应用需要支撑更多的并发量，同时我们的应用服务器和数据库服务器所做的计算也越来越多。但是往往我们的应用服务器资源是有限的，且技术变革是缓慢的，数据库每秒能接受的请求次数也是有限的（或者文件的读写也是有限的），如何能够有效利用有限的资源来提供尽可能大的吞吐量？一个有效的办法就是引入缓存，打破标准流程，每个环节中请求可以从缓存中直接获取目标数据并返回，从而减少计算量，有效提升响应速度，让有限的资源服务更多的用户。</p><p>​                                                 <img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/83465746.png" alt="图1 互联网应用一般流程">  </p><p>如图所示，缓存的使用可以出现在1-4的各个环节中，每个环节的缓存方案与使用各有特点。</p><h2 id="缓存的特征"><a href="#缓存的特征" class="headerlink" title="缓存的特征"></a>缓存的特征</h2><h3 id="命中率"><a href="#命中率" class="headerlink" title="命中率"></a>命中率</h3><p>命中率=返回正确结果数/请求缓存次数，命中率问题是缓存中的一个非常重要的问题，它是衡量缓存有效性的重要指标。命中率越高，表明缓存的使用率越高。</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210803132803817.png" alt="image-20210803132803817"><img src=".%5Cimage-20210803132829859.png" alt="image-20210803132829859"></p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210803133900309.png" alt="image-20210803133900309"></p><h3 id="最大元素（或最大空间）"><a href="#最大元素（或最大空间）" class="headerlink" title="最大元素（或最大空间）"></a>最大元素（或最大空间）</h3><p>缓存中可以存放的最大元素的数量，一旦缓存中元素数量超过这个值（或者缓存数据所占空间超过其最大支持空间），那么将会触发缓存启动清空策略根据不同的场景合理的设置最大元素值往往可以一定程度上提高缓存的命中率，从而更有效的时候缓存。</p><h3 id="清空策略"><a href="#清空策略" class="headerlink" title="清空策略"></a>清空策略</h3><p>如上描述，缓存的存储空间有限制，当缓存空间被用满时，如何保证在稳定服务的同时有效提升命中率？这就由缓存清空策略来处理，设计适合自身数据特征的清空策略能有效提升命中率。常见的一般策略有：</p><ul><li><strong>FIFO(first in first out)</strong></li></ul><p>先进先出策略，最先进入缓存的数据在缓存空间不够的情况下（超出最大元素限制）会被优先被清除掉，以腾出新的空间接受新的数据。策略算法主要比较缓存元素的创建时间。在数据实效性要求场景下可选择该类策略，优先保障最新数据可用。</p><ul><li><strong>LFU(less frequently used)</strong></li></ul><p>最少使用策略，无论是否过期，根据元素的被使用次数判断，清除使用次数较少的元素释放空间。策略算法主要比较元素的hitCount（命中次数）。在保证高频数据有效性场景下，可选择这类策略。</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210803134418528.png" alt="image-20210803134418528"></p><p>LFU 的数据结构包含三个部分:一个双向链表、若干双向循环链表、一个哈希表。其中,哈希表的作用与 LRU 相同,用于内容的快速查找。双向链表是频数链表,即链表的每个节点是访问计数,每个频数节点包含一个指针指向一个双向循环链表,双向循环链表中存储着内容信息,即所有具有相同访问计数的内容都存储在一个对应的双向循环链表中。哈希表存储的即是内容名称到双向循环链表节点指针的映射关系。</p><p>频数链表按照访问计数从小到大排列,当路由器因为存储新内容需要替换旧内容时,如果缓存空间不够,就从头节点 head 指向的频数节点指向的双向循环链表中删除内容节点以释放空间。如果第一个双向链表变为空,就将与之关联的频数节点从频数链表中删除。这样通过频数链表,所有内容就按照自己的访问计数有序的组织在一起。</p><p>特别地,这里要求频数链表中每个节点指向的双向循环链表都不为空,如果为空就删除该频数节点,从而限制了频数链表的长度,保证时间复杂度和空间复杂度不会无限制增长。当缓存中的某个内容被访问时,需要对其访问计数加 1。</p><p>此时,将其从原双向循环列表中删除,移动到对应访问计数的双向循环链表中,如果该频数节点不存在则创建一个新的频数节点和一个新的双向循环链表来存储该内容。经过这样复杂的维护,LFU 的查找和更新时间复杂度均为 O(1),空间复杂度为 O(N),为大规模实现仿真提供了良好的基础。</p><ul><li><strong>LRU(least recently used)</strong></li></ul><p>最近最少使用策略，无论是否过期，根据元素最后一次被使用的时间戳，清除最远使用时间戳的元素释放空间。策略算法主要比较元素最近一次被get使用时间。在热点数据场景下较适用，优先保证热点数据的有效性。</p><p>除此之外，还有一些简单策略比如：</p><ul><li>根据过期时间判断，清理过期时间最长的元素；</li><li>根据过期时间判断，清理最近要过期的元素；</li><li>随机清理；</li><li>根据关键字（或元素内容）长短清理等。</li></ul><p>我们常见的Redis的淘汰策略有六种：</p><ul><li>noeviction(默认策略)：对于写请求不再提供服务，直接返回错误（DEL请求和部分特殊请求除外）</li><li>allkeys-lru：从所有key中使用LRU算法进行淘汰</li><li>volatile-lru：从设置了过期时间的key中使用LRU算法进行淘汰</li><li>allkeys-random：从所有key中随机淘汰数据</li><li>volatile-random：从设置了过期时间的key中随机淘汰</li><li>volatile-ttl：在设置了过期时间的key中，淘汰过期时间剩余最短的</li></ul><h2 id="缓存介质"><a href="#缓存介质" class="headerlink" title="缓存介质"></a>缓存介质</h2><p>虽然从硬件介质上来看，无非就是内存和硬盘两种，但从技术上，可以分成内存、硬盘文件、数据库</p><ul><li><strong>内存：</strong>将缓存存储于内存中是最快的选择，无需额外的I/O开销，但是内存的缺点是没有持久化落地物理磁盘，一旦应用异常break down而重新启动，数据很难或者无法复原。</li><li><strong>硬盘：</strong>一般来说，很多缓存框架会结合使用内存和硬盘，在内存分配空间满了或是在异常的情况下，可以被动或主动的将内存空间数据持久化到硬盘中，达到释放空间或备份数据的目的。</li><li><strong>数据库：</strong>前面有提到，增加缓存的策略的目的之一就是为了减少数据库的I/O压力。现在使用数据库做缓存介质是不是又回到了老问题上了？其实，数据库也有很多种类型，像那些不支持SQL，只是简单的key-value存储结构的特殊数据库（如BerkeleyDB和Redis），响应速度和吞吐量都远远高于我们常用的关系型数据库等。</li></ul><p>Redis采用的就是内存的缓存介质，因此它的单机读取速度可高达110000次/s，写速度高达81000次/s，不过与memcache不同的是储存在Redis中的数据是持久化的，断电或重启后，数据也不会丢失。</p><h2 id="缓存分类和应用场景"><a href="#缓存分类和应用场景" class="headerlink" title="缓存分类和应用场景"></a>缓存分类和应用场景</h2><p>缓存有各类特征，而且有不同介质的区别，那么实际工程中我们怎么去对缓存分类呢？在目前的应用服务框架中，比较常见的，时根据缓存雨应用的藕合度，分为local cache（本地缓存）和remote cache（分布式缓存）：</p><ul><li><strong>本地缓存</strong>：指的是在应用中的缓存组件，其最大的优点是应用和cache是在同一个进程内部，请求缓存非常快速，没有过多的网络开销等，在单应用不需要集群支持或者集群情况下各节点无需互相通知的场景下使用本地缓存较合适；同时，它的缺点也是应为缓存跟应用程序耦合，多个应用程序无法直接的共享缓存，各应用或集群的各节点都需要维护自己的单独缓存，对内存是一种浪费。</li><li><strong>分布式缓存</strong>：指的是与应用分离的缓存组件或服务，其最大的优点是自身就是一个独立的应用，与本地应用隔离，多个应用可直接的共享缓存。</li></ul><p>目前各种类型的缓存都活跃在成千上万的应用服务中，还没有一种缓存方案可以解决一切的业务场景或数据类型，我们需要根据自身的特殊场景和背景，选择最适合的缓存方案。缓存的使用是程序员、架构师的必备技能，好的程序员能根据数据类型、业务场景来准确判断使用何种类型的缓存，如何使用这种缓存，以最小的成本最快的效率达到最优的目的。</p><h2 id="接下来讲一下我自己实现的分布式缓存"><a href="#接下来讲一下我自己实现的分布式缓存" class="headerlink" title="接下来讲一下我自己实现的分布式缓存"></a>接下来讲一下我自己实现的分布式缓存</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">xmcache/<br>    |--lru/<br>        |--lru.go   <span class="hljs-regexp">//</span> lru 缓存淘汰策略<br>    |--main/<br>    |main.go     <span class="hljs-regexp">//</span> 主函数<br>    |--model/<br>    |stock.go <span class="hljs-regexp">//</span> 数据源<br>|--singleflight/<br>|singleflight<span class="hljs-regexp">//</span> 解决缓存穿透<br>|--xmcachepb/<br>|xmcachepb.pb.go <span class="hljs-regexp">//</span> protobuf 生成代码<br>        |xmcachepb.proto <span class="hljs-regexp">//</span> protobuf<br>    |--byteview.go      <span class="hljs-regexp">//</span> 缓存值的抽象与封装<br>    |--cache.go     <span class="hljs-regexp">//</span> 并发控制<br>    |--xmcache.go  <span class="hljs-regexp">//</span> 负责与外部交互，控制缓存存储和获取的主流程<br>    |--peers.go  <span class="hljs-regexp">//</span> 负责寻找节点<br>|--http.go <span class="hljs-regexp">//</span> 提供被其他节点访问的能力(基于http)<br></code></pre></td></tr></table></figure><h3 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h3><p>采用LRU算法实现</p><h5 id="核心数据结构"><a href="#核心数据结构" class="headerlink" title="核心数据结构"></a>核心数据结构</h5><p><img src="https://geektutu.com/post/geecache-day1/lru.jpg" alt="implement lru algorithm with golang"></p><ul><li>绿色的是字典(map)，存储键和值的映射关系。这样根据某个键(key)查找对应的值(value)的复杂是<code>O(1)</code>，在字典中插入一条记录的复杂度也是<code>O(1)</code>。</li><li>红色的是双向链表(double linked list)实现的队列。将所有的值放到双向链表中，这样，当访问到某个值时，将其移动到队尾的复杂度是<code>O(1)</code>，在队尾新增一条记录以及删除一条记录的复杂度均为<code>O(1)</code>。</li></ul><h3 id="单机并发缓存"><a href="#单机并发缓存" class="headerlink" title="单机并发缓存"></a>单机并发缓存</h3><p>接下来举一个简单的例子，假设有10个并发的协程打印了同一个数字<code>100</code>，为了避免重复打印，实现了<code>printOnce(num int)</code> 函数，使用集合 set 记录已打印过的数字，如果数字已打印过，则不再打印。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> set = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">bool</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printOnce</span><span class="hljs-params">(num <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> _, exist := set[num]; !exist &#123;<br>fmt.Println(num)<br>&#125;<br>set[num] = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">go</span> printOnce(<span class="hljs-number">100</span>)<br>&#125;<br>time.Sleep(time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们运行 <code>go run .</code> 会发生什么情况呢？</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ go <span class="hljs-builtin-name">run</span> .<br>100<br>100<br></code></pre></td></tr></table></figure><p>有时候打印 2 次，有时候打印 4 次，有时候还会触发 panic，因为对同一个数据结构<code>set</code>的访问冲突了。接下来用互斥锁的<code>Lock()</code>和<code>Unlock()</code> 方法将冲突的部分包裹起来：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> m sync.Mutex<br><span class="hljs-keyword">var</span> set = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">bool</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printOnce</span><span class="hljs-params">(num <span class="hljs-keyword">int</span>)</span></span> &#123;<br>m.Lock()<br><span class="hljs-keyword">if</span> _, exist := set[num]; !exist &#123;<br>fmt.Println(num)<br>&#125;<br>set[num] = <span class="hljs-literal">true</span><br>m.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">go</span> printOnce(<span class="hljs-number">100</span>)<br>&#125;<br>time.Sleep(time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ go <span class="hljs-builtin-name">run</span> .<br>100<br></code></pre></td></tr></table></figure><p>相同的数字只会被打印一次。当一个协程调用了 <code>Lock()</code> 方法时，其他协程被阻塞了，直到<code>Unlock()</code>调用将锁释放。因此被包裹部分的代码就能够避免冲突，实现互斥。</p><p>因此使用 <code>sync.Mutex</code> 封装 LRU 的几个方法 <code>get()</code>  <code>add()</code>，使之支持并发的读写</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">                            <span class="hljs-comment">是</span><br><span class="hljs-comment">接收</span> <span class="hljs-comment">key</span> --&gt; <span class="hljs-comment">检查是否被缓存</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">返回缓存值</span> <span class="hljs-comment">⑴</span><br>                <span class="hljs-comment">|</span>  <span class="hljs-comment">否</span>                         <span class="hljs-comment">是</span><br>                <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">是否应当从远程节点获取</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">与远程节点交互</span> --&gt; <span class="hljs-comment">返回缓存值</span> <span class="hljs-comment">⑵</span><br>                            <span class="hljs-comment">|</span>  <span class="hljs-comment">否</span><br>                            <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">调用`回调函数`，获取值并添加到缓存</span> --&gt; <span class="hljs-comment">返回缓存值</span> <span class="hljs-comment">⑶</span><br></code></pre></td></tr></table></figure><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><p>对于分布式缓存来说，当一个节点接收到请求，如果该节点并没有存储缓存值，那么它面临的难题是，从谁那获取数据？自己，还是节点1, 2, 3, 4… 。假设包括自己在内一共有 10 个节点，当一个节点接收到请求时，随机选择一个节点，由该节点从数据源获取数据。</p><p>假设第一次随机选取了节点 1 ，节点 1 从数据源获取到数据的同时缓存该数据；那第二次，只有 1/10 的可能性再次选择节点 1, 有 9/10 的概率选择了其他节点，如果选择了其他节点，就意味着需要再一次从数据源获取数据，一般来说，这个操作是很耗时的。这样做，一是缓存效率低，二是各个节点上存储着相同的数据，浪费了大量的存储空间。</p><p>那有什么办法，对于给定的 key，每一次都选择同一个节点呢？使用 hash 算法也能够做到这一点。那把 key 的每一个字符的 ASCII 码加起来，再除以 10 取余数可以吗？当然可以，这可以认为是自定义的 hash 算法。</p><p><img src="https://geektutu.com/post/geecache-day4/hash_select.jpg" alt="hash select peer"></p><p>从上面的图可以看到，任意一个节点任意时刻请求查找键 <code>Tom</code> 对应的值，都会分配给节点 2，有效地解决了上述的问题。</p><p>节点数变化了怎么办？</p><p>简单求取 Hash 值解决了缓存性能的问题，但是没有考虑节点数量变化的场景。假设，移除了其中一台节点，只剩下 9 个，那么之前 <code>hash(key) % 10</code> 变成了 <code>hash(key) % 9</code>，也就意味着几乎缓存值对应的节点都发生了改变。即几乎所有的缓存值都失效了。节点在接收到对应的请求时，均需要重新去数据源获取数据，容易引起 <code>缓存雪崩</code>。</p><p>如何解决问题？采用一致性哈希算法</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><h5 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h5><p>一致性哈希算法将 key 映射到 2^32 的空间中，将这个数字首尾相连，形成一个环。</p><ul><li>计算节点/机器(通常使用节点的名称、编号和 IP 地址)的哈希值，放置在环上。</li><li>计算 key 的哈希值，放置在环上，顺时针寻找到的第一个节点，就是应选取的节点/机器。</li></ul><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210802170408705.png" alt="image-20210802170408705"></p><p>环上有 p2，p4 两节点，<code>key1</code>，<code>key2</code>，<code>key4</code>均映射到 peer2，<code>key3</code> 映射到 p4,此时，如果新增节点/机器 p6，假设它新增位置如图所示，那么只有 <code>key1</code> 从 p2 调整到 p6，其余的映射均没有发生改变。</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210802174002011.png" alt="image-20210802174002011"></p><p>也就是说，一致性哈希算法，在新增/删除节点时，只需要重新定位该节点附近的一小部分数据，而不需要重新定位所有的节点，这就解决了上述的问题。</p><h5 id="数据倾斜问题"><a href="#数据倾斜问题" class="headerlink" title="数据倾斜问题"></a>数据倾斜问题</h5><p>如果服务器的节点过少，容易引起 key 的倾斜。例如上面例子中的 p2，p4，分布在环的下半部分，上半部分是空的。那么映射到环上半部分的 key 都会被分配给 p2，key 过度向 p2 倾斜，缓存节点间负载不均。</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210802174141664.png" alt="image-20210802174141664"></p><p>为了解决这个问题，引入了虚拟节点的概念，一个真实节点对应多个虚拟节点。</p><p>假设 1 个真实节点对应 2 个虚拟节点，那么 p2 对应的虚拟节点是 p2-1、 p2-2（通常以添加编号的方式实现），其余节点也以相同的方式操作。</p><ul><li>第一步，计算虚拟节点的 Hash 值，放置在环上。</li><li>第二步，计算 key 的 Hash 值，在环上顺时针寻找到应选取的虚拟节点，例如是 p2-1，那么就对应真实节点 p2。</li></ul><p><img src="https://gitee.com/junior2018/mark_down/raw/master/LRU/image-20210802174953188.png" alt="image-20210802174953188"></p><p>虚拟节点扩充了节点的数量，解决了节点较少的情况下数据容易倾斜的问题。而且代价非常小，只需要增加一个字典(map)维护真实节点与虚拟节点的映射关系即可。</p><p>一致性哈希与Redis使用分片的策略对比</p><p>Redis 集群键分布算法使用数据分片（sharding）而非一致性哈希（consistency hashing）来实现： 一个 Redis 集群包含 16384 个哈希槽（hash slot）， 它们的编号为0、1、2、3……16382、16383，这个槽是一个逻辑意义上的槽，实际上并不存在。redis中的每个key都属于这 16384 个哈希槽的其中一个，存取key时都要进行key-&gt;slot的映射计算</p><p>无论是memcached的一致性哈希算法，还是redis的集群分区，最主要的目的都是在移除、添加一个节点时对已经存在的缓存数据的定位影响尽可能的降到最小。redis将哈希槽分布到不同节点的做法使得用户可以很容易地向集群中添加或者删除节点， 比如说：</p><ul><li><p>如果用户将新节点 D 添加到集群中， 那么集群只需要将节点 A 、B 、 C 中的某些槽移动到节点 D 就可以了。</p></li><li><p>与此类似， 如果用户要从集群中移除节点 A ， 那么集群只需要将节点 A 中的所有哈希槽移动到节点 B 和节点 C ， 然后再移除空白（不包含任何哈希槽）的节点 A 就可以了。</p></li></ul><p>因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线，从而保证集群的可用性。</p><h3 id="分布式节点"><a href="#分布式节点" class="headerlink" title="分布式节点"></a>分布式节点</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">使用一致性哈希选择节点</span>        <span class="hljs-comment">是</span>                                    <span class="hljs-comment">是</span><br>    <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">是否是远程节点</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">HTTP</span> <span class="hljs-comment">客户端访问远程节点</span> --&gt; <span class="hljs-comment">成功？</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">服务端返回返回值</span><br>                    <span class="hljs-comment">|</span>  <span class="hljs-comment">否</span>                                    <span class="hljs-comment">↓</span>  <span class="hljs-comment">否</span><br>                    <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt; <span class="hljs-comment">回退到本地节点处理。</span><br></code></pre></td></tr></table></figure><ul><li>在这里，抽象出 2 个接口，PeerPicker 的 <code>PickPeer()</code> 方法用于根据传入的 key 选择相应节点 PeerGetter。</li><li>接口 PeerGetter 的 <code>Get()</code> 方法用于从对应 group 查找缓存值。PeerGetter 就对应于上述流程中的 HTTP 客户端。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PeerPicker <span class="hljs-keyword">interface</span> &#123;<br>PickPeer(key <span class="hljs-keyword">string</span>)(peer PeerGetter,ok <span class="hljs-keyword">bool</span>) <span class="hljs-comment">//用于根据传入的 key 选择相应节点</span><br>&#125;<br><br><span class="hljs-keyword">type</span> PeerGetter <span class="hljs-keyword">interface</span>&#123;<br>Get(group <span class="hljs-keyword">string</span>, key <span class="hljs-keyword">string</span>)([]<span class="hljs-keyword">byte</span>,error) <span class="hljs-comment">//从对应 group 查找缓存值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为 HTTPPool 添加节点选择的功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> HTTPPool <span class="hljs-keyword">struct</span> &#123;<br>   <span class="hljs-comment">// this peer&#x27;s base URL, e.g. &quot;https://example.net:8000&quot;</span><br>   self        <span class="hljs-keyword">string</span><br>   basePath    <span class="hljs-keyword">string</span><br>   mu          sync.Mutex<br>   peers       *consistenthash.Map    <span class="hljs-comment">//一致性哈希算法的 Map，用来根据具体的 key 选择节点</span><br>   httpGetters <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*httpGetter <span class="hljs-comment">// 映射远程节点与对应的 httpGetter</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="防止缓存击穿"><a href="#防止缓存击穿" class="headerlink" title="防止缓存击穿"></a>防止缓存击穿</h3><blockquote><p><strong>缓存雪崩</strong>：缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。缓存雪崩通常因为缓存服务器宕机、缓存的 key 设置了相同的过期时间等引起。</p></blockquote><blockquote><p><strong>缓存击穿</strong>：一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到 DB ，造成瞬时DB请求量大、压力骤增。</p></blockquote><blockquote><p><strong>缓存穿透</strong>：查询一个不存在的数据，因为不存在则不会写到缓存中，所以每次都会去请求 DB，如果瞬间流量过大，穿透到 DB，导致宕机。</p></blockquote><p>使用<code>sync.WaitGroup</code>来阻塞后续的get请求，直到第一次get请求返回</p><p>并发协程之间不需要消息传递，非常适合 <code>sync.WaitGroup</code>。</p><ul><li>wg.Add(1) 锁加1。</li><li>wg.Wait() 阻塞，直到锁被释放。</li><li>wg.Done() 锁减1。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> singleflight<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;sync&quot;</span><br>   <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>   wg  sync.WaitGroup<br>   val <span class="hljs-keyword">interface</span>&#123;&#125;<br>   err error<br>&#125;<br><br><span class="hljs-keyword">type</span> Group <span class="hljs-keyword">struct</span> &#123;<br>   mu sync.Mutex<br>   m  <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*call<br>&#125;<br><br><span class="hljs-comment">//针对相同的 key，无论 Do 被调用多少次，函数 fn 都只会被调用一次，</span><br><span class="hljs-comment">//等待 fn 调用结束了，返回返回值或错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Group)</span> <span class="hljs-title">Do</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, fn <span class="hljs-keyword">func</span>()</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span>) <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;<br>   g.mu.Lock()<br>   <span class="hljs-keyword">if</span> g.m == <span class="hljs-literal">nil</span> &#123;<br>      g.m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*call)<br>   &#125;<br>   <span class="hljs-keyword">if</span> c, ok := g.m[key]; ok &#123;<br>      g.mu.Unlock()<br>      c.wg.Wait()          <span class="hljs-comment">// 如果请求正在进行中，则等待</span><br>      <span class="hljs-keyword">return</span> c.val, c.err<br>   &#125;<br>   c := <span class="hljs-built_in">new</span>(call)<br>   c.wg.Add(<span class="hljs-number">1</span>)          <span class="hljs-comment">// 发起请求前加锁</span><br>   g.m[key] = c            <span class="hljs-comment">// 添加到 g.m，表明 key 已经有对应的请求在处理</span><br><br>   g.mu.Unlock()<br><br>   c.val, c.err = fn()       <span class="hljs-comment">// 调用 fn，发起请求</span><br>   c.wg.Done()               <span class="hljs-comment">// 请求结束</span><br>   time.Sleep(time.Second*<span class="hljs-number">2</span>)  <span class="hljs-comment">//测试并发</span><br>   g.mu.Lock()<br>   <span class="hljs-built_in">delete</span>(g.m, key)         <span class="hljs-comment">// 更新 g.m</span><br>   g.mu.Unlock()<br><br>   <span class="hljs-keyword">return</span> c.val, c.err<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="节点之间的通信"><a href="#节点之间的通信" class="headerlink" title="节点之间的通信"></a>节点之间的通信</h3><h4 id="采用-protobuf"><a href="#采用-protobuf" class="headerlink" title="采用 protobuf"></a>采用 <code>protobuf</code></h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">option</span> go_package=<span class="hljs-string">&quot;./;xmcachepb&quot;</span>;<br><span class="hljs-keyword">package</span> xmcachepb;<br><br><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Request</span> </span>&#123;<br>  <span class="hljs-built_in">string</span> <span class="hljs-keyword">group</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">string</span> key = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Response</span> </span>&#123;<br>  <span class="hljs-built_in">bytes</span> value = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">service</span> <span class="hljs-title">GroupCache</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">rpc</span> Get(Request) <span class="hljs-keyword">returns</span> (Response)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>RPC</code>通信远程节点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 从访问远程节点，获取缓存值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Group)</span> <span class="hljs-title">getFromPeer</span><span class="hljs-params">(peer PeerGetter, key <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(ByteView, error)</span></span> &#123;<br>   req := &amp;pb.Request&#123;<br>      Group: g.name,<br>      Key:   key,<br>   &#125;<br>   res := &amp;pb.Response&#123;&#125;<br>   <span class="hljs-comment">// RPC 调用</span><br>   err := peer.Get(req, res)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> ByteView&#123;&#125;, err<br>   &#125;<br>   <span class="hljs-keyword">return</span> ByteView&#123;b: res.Value&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基础数据结构</title>
    <link href="/2021/07/20/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2021/07/20/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><h4 id="链表-介绍"><a href="#链表-介绍" class="headerlink" title="链表-介绍"></a>链表-介绍</h4><p>单链表</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/dataStructure/image-20210720174716565.png" alt="单链表"></p><p>双向链表<img src="https://gitee.com/junior2018/mark_down/raw/master/dataStructure/image-20210720174743076.png" alt="双向链表"></p><table><thead><tr><th></th><th>数组</th><th>链表（单链表，双向链表）</th></tr></thead><tbody><tr><td>存储方式</td><td>顺序存储</td><td>随机存储</td></tr><tr><td>相同点</td><td>线性数据结构</td><td>线性数据结构</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><img src="https://gitee.com/junior2018/mark_down/raw/master/dataStructure/image-20210720174838485.png" alt="数组内存分配"></p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/dataStructure/image-20210720174902864.png" alt="链表内存分配"></p><p>数组VS链表的操作性能</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/dataStructure/image-20210715203918961.png" alt="数组VS链表"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/07/19/Git/"/>
    <url>/2021/07/19/Git/</url>
    
    <content type="html"><![CDATA[<h4 id="简易的命令行入门教程"><a href="#简易的命令行入门教程" class="headerlink" title="简易的命令行入门教程:"></a>简易的命令行入门教程:</h4><p>Git 全局设置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Junior2018&quot;<br>git config --global user.email &quot;627942623@qq.com&quot;<br></code></pre></td></tr></table></figure><p>创建 git 仓库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir JuniorBlog<br>cd JuniorBlog<br>git init<br>touch README.md<br>git add README.md<br>git commit -m &quot;first commit&quot;<br>git remote add origin https://gitee.com/junior2018/JuniorBlog.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>已有仓库?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd existing_git_repo<br>git remote add origin https://gitee.com/junior2018/JuniorBlog.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>多个远端分支</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/git/image-20210719162521654.png" alt="image-20210719162521654"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Jude</title>
    <link href="/2021/07/19/Jude/"/>
    <url>/2021/07/19/Jude/</url>
    
    <content type="html"><![CDATA[<p>博客搭建</p><p><a href="https://www.liuxunzhuo.top/">https://www.liuxunzhuo.top/</a></p><p><a href="https://github.com/Xunzhuo/Coder">https://github.com/Xunzhuo/Coder</a></p><p><a href="https://liuxunzhuo.tech/">https://liuxunzhuo.tech/</a></p><p><a href="https://old.liuxunzhuo.tech/">https://old.liuxunzhuo.tech/</a></p><p>博客示例</p><p><a href="https://rook1e.com/">https://rook1e.com/</a></p><p><a href="https://www.leavesongs.com/other/friends-link.html">https://www.leavesongs.com/other/friends-link.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客部署更新</title>
    <link href="/2021/07/19/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/07/19/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo博客部署更新"><a href="#hexo博客部署更新" class="headerlink" title="hexo博客部署更新"></a>hexo博客部署更新</h2><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><code>hexo_blog</code> 为源markdown 文件</p><p><code>junior_blog.GitHub.io</code> 为生成的静态文件（这个目录可以不用管，只用于存储静态文件）</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719143054091.png" alt="image-20210719143054091"></p><p>编写markdown 文件后，将文件保存至  <code>/source/_posts</code>   目录</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719143305266.png" alt="image-20210719143305266"></p><p>到项目根目录使用命令 <code>hexo g -d</code> 会自动生成静态文件，并上传至静态文件git地址 </p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719145433820.png" alt="image-20210719145433820"></p><p>上传成功</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719145707113.png" alt="image-20210719145707113"></p><p>将本地修改推送至源文件目录地址，保存源文件记录</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>goms</title>
    <link href="/2021/07/15/goms/"/>
    <url>/2021/07/15/goms/</url>
    
    <content type="html"><![CDATA[<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ol><li>select 和 epoll。（很常规的问题，也算是必考题了）</li><li>HTTP 和 HTTPS 的区别。</li><li>TCP 拥塞控制。</li><li>HTTPS 的加密过程</li><li>三次握手和四次挥手，说一下 time_wait</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>kafka</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>引用传递类型：map、slice、channel、指针类型</p><h3 id="Golang中make与new有何区别"><a href="#Golang中make与new有何区别" class="headerlink" title="Golang中make与new有何区别"></a>Golang中make与new有何区别</h3><p>对于<code>引用类型</code>的变量，我们不光要声明它，还要为它分配内存空间，</p><p>对于<code>值类型</code>的声明不需要，是因为已经默认帮我们分配好了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">相同点：<br><span class="hljs-built_in">new</span> 和 <span class="hljs-built_in">make</span> 都是为了分配内存<br><br>不同点：<br><span class="hljs-built_in">new</span>(不常用)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">new 接受一个类型参数，返回一个指向该类型内存地址的指针，并且会将值置为类型的零值</span><br><span class="hljs-comment">int 零值为0，string 零值为&quot;&quot;，引用类型的零值为 nil</span><br><span class="hljs-comment">*/</span><br>num := <span class="hljs-built_in">new</span>(<span class="hljs-keyword">int</span>)<br><br><br><span class="hljs-built_in">make</span>(无可替代)<br><span class="hljs-comment">//只适用于chan,map,slice 的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以没有必要返回他们的指针</span><br><br><br></code></pre></td></tr></table></figure><h3 id="go-的GC-垃圾回收"><a href="#go-的GC-垃圾回收" class="headerlink" title="go 的GC 垃圾回收"></a>go 的GC 垃圾回收</h3><p>三色标记法</p><h3 id="Go-Context"><a href="#Go-Context" class="headerlink" title="Go Context"></a>Go Context</h3><p>控制并发有两种经典的方式，一种是WaitGroup，另外一种就是Context，</p><p>WaitGroup 控制并发，必须等待所有的goroutine 都完成，才算结束</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br>wg.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(<span class="hljs-number">2</span>*time.Second)<br>fmt.Println(<span class="hljs-string">&quot;1号完成&quot;</span>)<br>wg.Done()<br>&#125;()<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(<span class="hljs-number">2</span>*time.Second)<br>fmt.Println(<span class="hljs-string">&quot;2号完成&quot;</span>)<br>wg.Done()<br>&#125;()<br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;好了，大家都干完了，放工&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>chan 通知 （chan + select）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>stop := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-stop:<br>fmt.Println(<span class="hljs-string">&quot;监控退出，停止了...&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;goroutine监控中...&quot;</span>)<br>time.Sleep(<span class="hljs-number">2</span> * time.Second)<br>&#125;<br>&#125;<br>&#125;()<br><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br>fmt.Println(<span class="hljs-string">&quot;可以了，通知监控停止&quot;</span>)<br>stop&lt;- <span class="hljs-literal">true</span> <span class="hljs-comment">//发送结束通知</span><br><span class="hljs-comment">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span><br>time.Sleep(<span class="hljs-number">5</span> * time.Second)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Context  适用于嵌套的 goroutine</p><p>比如一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。所以我们需要一种可以跟踪goroutine的方案，才可以达到控制他们的目的，这就是Go语言为我们提供的Context，称之为上下文非常贴切，它就是goroutine的上下文</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br>fmt.Println(<span class="hljs-string">&quot;监控退出，停止了...&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;goroutine监控中...&quot;</span>)<br>time.Sleep(<span class="hljs-number">2</span> * time.Second)<br>&#125;<br>&#125;<br>&#125;(ctx)<br><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br>fmt.Println(<span class="hljs-string">&quot;可以了，通知监控停止&quot;</span>)<br>cancel()<br><span class="hljs-comment">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span><br>time.Sleep(<span class="hljs-number">5</span> * time.Second)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>示例中启动了3个监控goroutine进行不断的监控，每一个都使用了Context进行跟踪，当我们使用<code>cancel</code>函数通知取消时，这3个goroutine都会被结束。这就是Context的控制能力，它就像一个控制器一样，按下开关后，所有基于这个Context或者衍生的子Context都会收到通知，这时就可以进行清理操作了，最终释放goroutine，这就优雅的解决了goroutine启动后不可控的问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> watch(ctx,<span class="hljs-string">&quot;【监控1】&quot;</span>)<br><span class="hljs-keyword">go</span> watch(ctx,<span class="hljs-string">&quot;【监控2】&quot;</span>)<br><span class="hljs-keyword">go</span> watch(ctx,<span class="hljs-string">&quot;【监控3】&quot;</span>)<br><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br>fmt.Println(<span class="hljs-string">&quot;可以了，通知监控停止&quot;</span>)<br>cancel()<br><span class="hljs-comment">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span><br>time.Sleep(<span class="hljs-number">5</span> * time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">watch</span><span class="hljs-params">(ctx context.Context, name <span class="hljs-keyword">string</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br>fmt.Println(name,<span class="hljs-string">&quot;监控退出，停止了...&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>fmt.Println(name,<span class="hljs-string">&quot;goroutine监控中...&quot;</span>)<br>time.Sleep(<span class="hljs-number">2</span> * time.Second)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个线程分为<code>内核态</code>线程和<code>用户态</code>线程，一个用户态线程必须绑定一个内核态线程</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/47e396eea8f0e71532356197412d52f1_1294x1106.png" alt="img"></p><p>我们将内核线程叫<code>线程</code>，用户线程叫<code>协程</code></p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/459db145d4e702994548a1757238946f_1248x1064.png" alt="img"></p><p>协程与线程的映射关系</p><blockquote><p>N:1 关系：N个协程绑定1个线程</p></blockquote><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/f8d715899f6db333d37f2bf738116bfd_1352x1092.png" alt="img"></p><blockquote><p>1:1关系：1个协程绑定1个线程</p></blockquote><blockquote><p>M:N 关系</p></blockquote><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/0037f6c2e12ad82a912990bba3e0085c_1336x1112.png" alt="img"></p><p>协程跟线程是有区别的，线程由CPU调度是抢占式的，<strong>协程由用户态调度是协作式的</strong>，一个协程让出CPU后，才执行下一个协程</p><h3 id="被废弃的goroutine调度器（GM）"><a href="#被废弃的goroutine调度器（GM）" class="headerlink" title="被废弃的goroutine调度器（GM）"></a>被废弃的goroutine调度器（GM）</h3><p>G —— Goroutine 协程</p><p>M —— 线程</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/bdcdc5e6fcb03244a9843333cca62378_1292x860.png" alt="img"></p><p>缺点：</p><ol><li>创建、销毁、调度G都需要每个M获取锁，这就形成了<strong>激烈的锁竞争</strong>。</li><li>M转移G会造成<strong>延迟和额外的系统负载</strong>。比如当G中包含创建新协程的时候，M创建了G’，为了继续执行G，需要把G’交给M’执行，也造成了<strong>很差的局部性</strong>，因为G’和G是相关的，最好放在M上执行，而不是其他M’。</li><li>系统调用(CPU在M之间的切换)导致频繁的线程阻塞和取消阻塞操作增加了系统开销</li></ol><h3 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h3><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/6bdb04101cc63565c17cd8fcaba17321_1068x876.png" alt="img"></p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/ebfe3e28315f12a08fbb4ffaee32e046_1024x768.png" alt="img"></p><p>P 默认数量为CPU 核数</p><h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">[如何通过JWT防御CSRF]<br>(https:<span class="hljs-regexp">//</span>segmentfault.com<span class="hljs-regexp">/a/</span><span class="hljs-number">1190000003716037</span>)<br><br>JWT (JSON Web Token) <br>https:<span class="hljs-regexp">//</span>xie.infoq.cn<span class="hljs-regexp">/article/</span><span class="hljs-number">5</span>efd17d8261409a92c7b82bb9<br><br>由于http 是无状态的<br>JWT 和 Session Cookies 就是用来处理在不同页面之间切换，保存用户登录信息的机制<br><br>Session Cookies<br>session 信息保存在服务端，在每次请求时，服务器都会从会话 Cookie 中读取 SessionId，如果服务端的数据和读取的 SessionId 相同，那么服务器就会发送响应给浏览器，允许用户登录<br><br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/06fd4ada6af3f39d868e3319c72c03cf.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/15/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/"/>
    <url>/2021/07/15/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"><a href="#title-四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构" class="headerlink" title="title:四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"></a>title:四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构</h2><h1 id="四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"><a href="#四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构" class="headerlink" title="四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"></a>四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构</h1><p> Posted on 2019-03-23 | 1510</p><p> Words count in article: 3.4k | Reading time ≈ 11</p><h3 id="一、单体架构"><a href="#一、单体架构" class="headerlink" title="一、单体架构"></a>一、单体架构</h3><p>  单体架构比较初级，典型的三级架构，前端(Web/手机端)+中间业务逻辑层+数据库层。这是一种典型的Java Spring mvc或者Python Django框架的应用。其架构图如下所示：</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/1.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/1.png" alt="img"></a></p><p> 单体架构的应用比较容易部署、测试， 在项目的初期，单体应用可以很好地运行。然而，随着需求的不断增加， 越来越多的人加入开发团队，代码库也在飞速地膨胀。慢慢地，单体应用变得越来越臃肿，可维护性、灵活性逐渐降低，维护成本越来越高。下面是单体架构应用的一些缺点：</p><ul><li><strong>复杂性高</strong>： 以一个百万行级别的单体应用为例，整个项目包含的模块非常多、模块的边界模糊、 依赖关系不清晰、 代码质量参差不齐、 混乱地堆砌在一起。可想而知整个项目非常复杂。 每次修改代码都心惊胆战， 甚至添加一个简单的功能， 或者修改一个Bug都会带来隐含的缺陷。</li><li><strong>技术债务</strong>： 随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务， 并且越积 越多。“ 不坏不修”， 这在软件开发中非常常见， 在单体应用中这种思想更甚。 已使用的系统设计或代码难以被修改，因为应用程序中的其他模块可能会以意料之外的方式使用它。</li><li><strong>部署频率低</strong>： 随着代码的增多，构建和部署的时间也会增加。而在单体应用中， 每次功能的变更或缺陷的修复都会导致需要重新部署整个应用。全量部署的方式耗时长、 影响范围大、 风险高， 这使得单体应用项目上线部署的频率较低。 而部署频率低又导致两次发布之间会有大量的功能变更和缺陷修复，出错率比较高。<br>可靠性差： 某个应用Bug，例如死循环、内存溢出等， 可能会导致整个应用的崩溃。</li><li><strong>扩展能力受限</strong>： 单体应用只能作为一个整体进行扩展，无法根据业务模块的需要进行伸缩。例如，应用中有的模块是计算密集型的，它需要强劲的CPU； 有的模块则是IO密集型的，需要更大的内存。 由于这些模块部署在一起，不得不在硬件的选择上做出妥协。</li><li><strong>阻碍技术创新</strong>： 单体应用往往使用统一的技术平台或方案解决所有的问题， 团队中的每个成员 都必须使用相同的开发语言和框架，要想引入新框架或新技术平台会非常困难。</li></ul><h3 id="二、分布式应用"><a href="#二、分布式应用" class="headerlink" title="二、分布式应用"></a>二、分布式应用</h3><p>  中级架构，分布式应用，中间层分布式+数据库分布式，是单体架构的并发扩展，将一个大的系统划分为多个业务模块，业务模块分别部署在不同的服务器上，各个业务模块之间通过接口进行数据交互。数据库也大量采用分布式数据库，如redis、ES、solor等。通过LVS/Nginx代理应用，将用户请求均衡的负载到不同的服务器上。其架构图如下所示：</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/2.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/2.png" alt="img"></a></p><p>  该架构相对于单体架构来说，这种架构提供了负载均衡的能力，大大提高了系统负载能力，解决了网站高并发的需求。另外还有以下特点：</p><ul><li><strong>降低了耦合度</strong>：把模块拆分,使用接口通信,降低模块之间的耦合度。</li><li><strong>责任清晰</strong>：把项目拆分成若干个子项目,不同的团队负责不同的子项目。</li><li><strong>扩展方便</strong>：增加功能时只需要再增加一个子项目,调用其他系统的接口就可以。</li><li><strong>部署方便</strong>:可以灵活的进行分布式部署。</li><li><strong>提高代码的复用</strong>性：比如service层,如果不采用分布式rest服务方式架构就会在手机wap商城,微信商城,pc,android，ios每个端都要写一个service层逻辑,开发量大,难以维护一起升级,这时候就可以采用分布式rest服务方式,公用一个service层。</li><li><strong>缺点</strong> : 系统之间的交互要使用远程通信,接口开发增大工作量,但是利大于弊。</li></ul><h3 id="三、微服务架构"><a href="#三、微服务架构" class="headerlink" title="三、微服务架构"></a>三、微服务架构</h3><p>微服务架构，主要是中间层分解，将系统拆分成很多小应用（微服务），微服务可以部署在不同的服务器上，也可以部署在相同的服务器不同的容器上。当应用的故障不会影响到其他应用，单应用的负载也不会影响到其他应用，其代表框架有Spring cloud、Dubbo等。 其架构图如下所示：</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/3.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/3.png" alt="img"></a></p><ul><li><strong>易于开发和维护</strong>： 一个微服务只会关注一个特定的业务功能，所以它业务清晰、代码量较少。 开发和维护单个微服务相对简单。而整个应用是由若干个微服务构建而成的，所以整个应用也会被维持在一个可控状态。</li><li><strong>单个微服务启动较快</strong>： 单个微服务代码量较少， 所以启动会比较快。</li><li><strong>局部修改容易部署</strong>： 单体应用只要有修改，就得重新部署整个应用，微服务解决了这样的问题。 一般来说，对某个微服务进行修改，只需要重新部署这个服务即可。</li><li><strong>技术栈不受限</strong>：在微服务架构中，可以结合项目业务及团队的特点，合理地选择技术栈。例如某些服务可使用关系型数据库MySQL；某些微服务有图形计算的需求，可以使用Neo4j；甚至可根据需要，部分微服务使用Java开发，部分微服务使用Node.js开发。</li></ul><p>  微服务虽然有很多吸引人的地方，但它并不是免费的午餐，使用它是有代价的。使用微服务架构面临的挑战。</p><ul><li><strong>运维要求较高</strong>：更多的服务意味着更多的运维投入。在单体架构中，只需要保证一个应用的正常运行。而在微服务中，需要保证几十甚至几百个服务服务的正常运行与协作，这给运维带来了很大的挑战。</li><li><strong>分布式固有的复杂性</strong>：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延迟、分布式事务等都会带来巨大的挑战。</li><li><strong>接口调整成本高</strong>：微服务之间通过接口进行通信。如果修改某一个微服务的API，可能所有使用了该接口的微服务都需要做调整。</li><li><strong>重复劳动</strong>：很多服务可能都会使用到相同的功能，而这个功能并没有达到分解为一个微服务的程度，这个时候，可能各个服务都会开发这一功能，从而导致代码重复。尽管可以使用共享库来解决这个问题（例如可以将这个功能封装成公共组件，需要该功能的微服务引用该组件），但共享库在多语言环境下就不一定行得通了。</li></ul><h3 id="四、Serverless架构"><a href="#四、Serverless架构" class="headerlink" title="四、Serverless架构"></a>四、Serverless架构</h3><p>当我们还在容器的浪潮中前行时，已经有一些革命先驱悄然布局另外一个云计算战场：Serverless架构。</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/4.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/4.png" alt="img"></a></p><p>  2014年11月14日，亚马逊AWS发布了新产品Lambda。当时Lambda被描述为：一种计算服务，根据时间运行用户的代码，无需关心底层的计算资源。从某种意义上来说，Lambda姗姗来迟，它像云计算的PaaS理念：客户只管业务，无需担心存储和计算资源。在此前不久，2014年10月22日，谷歌收购了实时后端数据库创业公司Firebase。Firebase声称开发者只需引用一个API库文件就可以使用标准REST API的各种接口对数据进行读写操作，只需编写HTML＋CSS＋JavaScrip前端代码，不需要服务器端代码（如需整合，也极其简单）。</p><p>  相对于上两者，Facebook 在2014年二月收购的 Parse，则侧重于提供一个通用的后台服务。这些服务被称为Serverless或no sever。想到PaaS（平台即服务）了是吗？很像，用户不需要关心基础设施，只需要关心业务，这是迟到的PaaS，也是更实用的PaaS。这很有可能将会变革整个开发过程和传统的应用生命周期，一旦开发者们习惯了这种全自动的云上资源的创建和分配，或许就再也回不到那些需要微应用配置资源的时代里去了。</p><p>  Serverless架构能够让开发者在构建应用的过程中无需关注计算资源的获取和运维，由平台来按需分配计算资源并保证应用执行的SLA（服务等级协议），按照调用次数进行计费，有效的节省应用成本。ServerLess的架构如上图所示。其优点如下所示：</p><ul><li><strong>低运营成本</strong>：在业务突发性极高的场景下，系统为了应对业务高峰，必须构建能够应对峰值需求的系统，这个系统在大部分时间是空闲的，这就导致了严重的资源浪费和成本上升。在微服务架构中，服务需要一直运行，实际上在高负载情况下每个服务都不止一个实例，这样才能完成高可用性；在Serverless架构下，服务将根据用户的调用次数进行计费，按照云计算pay-as-you-go原则，如果没有东西运行，你就不必付款，节省了使用成本。同时，用户能够通过共享网络、硬盘、CPU等计算资源，在业务高峰期通过弹性扩容方式有效的应对业务峰值，在业务波谷期将资源分享给其他用户，有效的节约了成本。</li><li><strong>简化设备运维</strong>：在原有的IT体系中，开发团队即需要维护应用程序，同时还要维护硬件基础设施；Serverless架构中，开发人员面对的将是第三方开发或自定义的API 和URL，底层硬件对于开发人员透明化了，技术团队无需再关注运维工作，能够更加专注于应用系统开发。</li><li><strong>提升可维护性</strong>：Serverless架构中，应用程序将调用多种第三方功能服务，组成最终的应用逻辑。目前，例如登陆鉴权服务，云数据库服务等第三方服务在安全性、可用性、性能方面都进行了大量优化，开发团队直接集成第三方的服务，能够有效的降低开发成本，同时使得应用的运维过程变得更加清晰，有效的提升了应用的可维护性。</li><li><strong>更快的开发速度</strong>：这一点在现在互联网创业公司得到很好的体现，创业公司往往开始由于人员和资金等问题，不可能每个产品线都同时进行，这时候就可以考虑第三方的Baas平台，比如使用微信的用户认证、阿里云提供的RDS，极光的消息推送，第三方支付及地理位置等等，能够很快进行产品开发的速度，把工作重点放在业务实现上，把产品更快的推向市场。<br>但ServerLess架构也有其缺点：</li><li><strong>厂商平台绑定</strong>：平台会提供Serverless架构给大玩家，比如AWS Lambda，运行它需要使用AWS指定的服务，比如API网关，DynamoDB，S3等等，一旦你在这些服务上开发一个复杂系统，你会粘牢AWS，以后只好任由他们涨价定价或者下架等操作，个性化需求很难满足，不能进行随意的迁移或者迁移的成本比较大，同时不可避免带来一些损失。Baas行业内一个比较典型的事件，2016年1月19日Facebook关闭曾经花巨额资金收购的Parse，造成用户不得不迁移在这个平台中产生一年多的数据，无疑需要花费比较大的人力和时间成本。</li><li><strong>成功案例比较少，没有行业标准</strong>：目前的情况也只适合简单的应用开发，缺乏大型成功案例的推动。对于Serverless缺乏统一的认知以及相应的标准，无法适应所有的云平台。</li></ul><p>  目前微服务架构在四种架构中处于主流地位，很多应用第一、第二种架构的企业也开始慢慢转向微服务架构。到目前为止微服务的技术相对于二三年前已经比较成熟，第四种架构将是未来发展的一种趋势。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">原文链接：https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>e7b992a82dc0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用</title>
    <link href="/2021/06/22/hexo/"/>
    <url>/2021/06/22/hexo/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><span class="hljs-comment">#让 Hexo 在生成完毕后自动部署网站</span><br>$ hexo generate --deploy<br>$ hexo deploy --generate<br><span class="hljs-comment">#简写上面两个命令可以简写为</span><br>$ hexo g -d<br>$ hexo d -g<br><br><span class="hljs-comment">#使用 Hexo 生成静态文件</span><br>$ hexo generate<br>$ hexo g<br><br><span class="hljs-comment">#启动服务器。默认情况下，访问网址为： http://localhost:4000/</span><br>$ hexo server<br><br><span class="hljs-comment">#部署网址</span><br>$ hexo d<br><br><span class="hljs-comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="hljs-comment">#在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</span><br>$ hexo clean<br><br><br><br>$ hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>如图显示表示部署成功</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/image-20210622145150706.png" alt="image-20210622145150706"></p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/image-20210622145125975.png" alt="image-20210622145125975"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go 基础只是</title>
    <link href="/2021/06/22/GO/"/>
    <url>/2021/06/22/GO/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> path<br><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> 引入包安装目录 <br><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> tidy  //安装包<br><br><span class="hljs-built_in">go</span> 调度器  MPG 模型<br><br><span class="hljs-number">1.</span><span class="hljs-built_in">go</span>的安装跟gopath的设置<br><span class="hljs-number">2.</span><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span>介绍使用<br><span class="hljs-number">3.</span><span class="hljs-built_in">go</span>的调度器 MPG模型<br><span class="hljs-number">4.</span>channel goroutine简介<br><span class="hljs-number">5</span>.每分钟处理百万级请求 <br><span class="hljs-number">6.</span>web框架gin介绍<br><br></code></pre></td></tr></table></figure><p>Go 调度器 GMP 原理与调度</p><p>数组切片</p><p>map</p><p>struct 结构体</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//Go语言主要有四种类型的声明语句：var、const、type和func，</span><br><span class="hljs-comment">//分别对应变量、常量、类型和函数实体对象的声明</span><br><br><br><span class="hljs-comment">//一次性声明多个常量</span><br><span class="hljs-keyword">const</span> freezingF, boilingF = <span class="hljs-number">32.0</span>, <span class="hljs-number">212.0</span><br><br><br></code></pre></td></tr></table></figure><p>变量声明后，默认使用零值进行变量初始化</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组声明需要定义长度，也可以使用 … 定义自适应长度</p><p><strong>数组的索引值只能是 int</strong>，索引下标的范围是从0开始到数组长度减1的位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//数组声明</span><br><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>             <span class="hljs-comment">// array of 3 integers</span><br>fmt.Println(a[<span class="hljs-number">0</span>])        <span class="hljs-comment">// print the first element</span><br>fmt.Println(a[<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>]) <span class="hljs-comment">// print the last element, a[2]</span><br><br><br><span class="hljs-comment">//数组遍历</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, v)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>, v)<br>&#125;<br><br><br><span class="hljs-comment">//数组声明并初始化</span><br>q := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>b := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> go env</span>  <br><span class="hljs-meta">#</span><span class="bash">查看 GOROOT (go 安装目录,go 自带的包会在这个目录，如fmt 包)</span><br><span class="hljs-meta">#</span><span class="bash">GOPATH (go get 安装的包会在此目录)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> go env -w GO111MODULE=on   <span class="hljs-comment"># 打开 Go modules 开关</span></span><br><span class="hljs-meta">$</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct  <span class="hljs-comment">#设置 GOPROXY 代理</span></span><br></code></pre></td></tr></table></figure><p>GoLand  需要设置GOROOT 才会显示</p><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210119144217025.png" alt="image-20210119144217025"></p><ul><li>Go Modules 简介</li></ul><p>go-ini/ini   配置文件读取</p><p>gorm </p><p>net/http</p><p>gin</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">【github.com/<span class="hljs-keyword">go</span>-ini/ini】<br>【配置文件.ini】<br>【读取配置文件方法】<br><br>【错误码code】<br>【错误信息msg 文件】<br><br>【分页页码的获取方法】<br><br><br>**model 数据库模型 **<br><br>**编写路由文件 **<br><br></code></pre></td></tr></table></figure><p>go 定时任务</p><p>如何保证定时任务自动重启（守护进程如何配置 supervis）</p><p>项目初始化</p><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210427162611082.png" alt="image-20210427162611082"></p><h4 id="函数，方法"><a href="#函数，方法" class="headerlink" title="函数，方法"></a>函数，方法</h4><p>函数：</p><p>方法：在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// traditional function</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Distance</span><span class="hljs-params">(p, q Point)</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br><br><span class="hljs-comment">// same thing, but as a method of the Point type</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Point)</span> <span class="hljs-title">Distance</span><span class="hljs-params">(q Point)</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h4><ul><li>init函数先于main函数自动执行，不能被其他函数调用；</li><li>init函数没有输入参数、返回值；</li><li>每个包可以有多个init函数；</li><li><strong>包的每个源文件也可以有多个init函数</strong>，这点比较特殊；</li><li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。</li><li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main                       <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> T <span class="hljs-keyword">int64</span> = a()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;init in main.go &quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;calling a()&quot;</span>)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;                  <br>   fmt.Println(<span class="hljs-string">&quot;calling main&quot;</span>)     <br>&#125;<br><br><span class="hljs-comment">//结果</span><br>calling a()<br>init in main.<span class="hljs-keyword">go</span><br>calling main<br><span class="hljs-comment">// 初始化顺序：变量初始化-&gt;init()-&gt;main()</span><br></code></pre></td></tr></table></figure><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//定义结构体：（定义了一个person结构体）</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>city <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int8</span><br>&#125;<br><br><br><span class="hljs-comment">//-------实例化</span><br><br><span class="hljs-comment">//结构体实例化：只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</span><br><span class="hljs-keyword">var</span> p1 person<br>p1.name = <span class="hljs-string">&quot;沙河娜扎&quot;</span><br><br><span class="hljs-comment">//创建指针类型结构体</span><br><span class="hljs-keyword">var</span> p2 = <span class="hljs-built_in">new</span>(person)<br><br><span class="hljs-comment">//取结构体的地址实例化</span><br>p3 := &amp;person&#123;&#125;<br>p3.name = <span class="hljs-string">&quot;七米&quot;</span>   <span class="hljs-comment">// p3.name = &quot;七米&quot;其实在底层是 (*p3).name = &quot;七米&quot;</span><br><br><br><br><span class="hljs-comment">//----初始化</span><br><br><span class="hljs-comment">//没有初始化的结构体，其成员变量都是对应其类型的零值。</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>city <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int8</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> p4 person<br>fmt.Printf(<span class="hljs-string">&quot;p4=%#v\n&quot;</span>, p4) <span class="hljs-comment">//p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br>&#125;<br><br><span class="hljs-comment">//键值对初始化</span><br>p5 := person&#123;<br>name: <span class="hljs-string">&quot;小王子&quot;</span>,<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//结构体指针进行键值对初始化</span><br>p6 := &amp;person&#123;<br>name: <span class="hljs-string">&quot;小王子&quot;</span>,<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//省略字段初始化</span><br>p7 := &amp;person&#123;<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>&#125;<br><br><br><span class="hljs-comment">//使用值的列表初始化</span><br><span class="hljs-comment">//必须初始化结构体的所有字段。</span><br><span class="hljs-comment">//初始值的填充顺序必须与字段在结构体中的声明顺序一致。</span><br><span class="hljs-comment">//该方式不能和键值初始化方式混用。</span><br>p8 := &amp;person&#123;<br><span class="hljs-string">&quot;沙河娜扎&quot;</span>,<br><span class="hljs-string">&quot;北京&quot;</span>,<br><span class="hljs-number">28</span>,<br>&#125;<br><br><br><span class="hljs-comment">//空结构体是不占用空间的。</span><br><span class="hljs-keyword">var</span> v <span class="hljs-keyword">struct</span>&#123;&#125;<br>fmt.Println(unsafe.Sizeof(v))  <span class="hljs-comment">// 0</span><br><br><br></code></pre></td></tr></table></figure><p>思考</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> student <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*student)<br>stus := []student&#123;<br>&#123;name: <span class="hljs-string">&quot;小王子&quot;</span>, age: <span class="hljs-number">18</span>&#125;,<br>&#123;name: <span class="hljs-string">&quot;娜扎&quot;</span>, age: <span class="hljs-number">23</span>&#125;,<br>&#123;name: <span class="hljs-string">&quot;大王八&quot;</span>, age: <span class="hljs-number">9000</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, stu := <span class="hljs-keyword">range</span> stus &#123;<br>m[stu.name] = &amp;stu<br>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>fmt.Println(k, <span class="hljs-string">&quot;=&gt;&quot;</span>, v.name)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p><code>&amp;</code>（取地址，即指针）和<code>*</code>（根据地址取值，即指针取值）</p><p>取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">10</span><br>b := &amp;a<br>    fmt.Println(b)  <span class="hljs-comment">// 0xc00000a0c0  (&amp;取地址)</span><br>c := *b <span class="hljs-comment">// 指针取值（根据指针去内存取值）</span><br>fmt.Println(c) <span class="hljs-comment">// 10 （*根据地址取值）</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>引用类型的变量</strong>，我们在使用的时候不仅要<strong>声明它</strong>，还要为它<strong>分配内存</strong>空间，否则我们的值就没办法存储</p><p>而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存。</p><h3 id="new与make的区别"><a href="#new与make的区别" class="headerlink" title="new与make的区别"></a>new与make的区别</h3><ol><li>二者都是用来做内存分配的。</li><li>make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</li><li>而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</li></ol><h4 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h4><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//日志格式</span><br>log.SetFlags(log.Llongfile | log.Ltime | log.Ldate)<br>    <span class="hljs-comment">//日志前缀</span><br>log.SetPrefix(<span class="hljs-string">&quot;[小黑子]&quot;</span>)<br>    <span class="hljs-comment">//日志输出位置</span><br>logFile,err := os.OpenFile(<span class="hljs-string">&quot;junior.log&quot;</span>,os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0644</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>log.SetOutput(logFile)<br>    <span class="hljs-comment">//打印日志</span><br>log.Println(<span class="hljs-string">&quot;这是一个普通日志&quot;</span>)<br><br><br><span class="hljs-comment">//自定义日志：输出位置，日志前缀，日志格式</span><br>logger := log.New(os.Stdout, <span class="hljs-string">&quot;&lt;New&gt;&quot;</span>, log.Lshortfile|log.Ldate|log.Ltime)<br>logger.Println(<span class="hljs-string">&quot;这是自定义的logger记录的日志。&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210506112305732.png" alt="image-20210506112305732"></p><h4 id="viper-go配置"><a href="#viper-go配置" class="headerlink" title="viper -go配置"></a>viper -go配置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//读取配置文件</span><br>viper.SetConfigFile(<span class="hljs-string">&quot;./config.toml&quot;</span>)<br>err := viper.ReadInConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-comment">//设置默认值</span><br>viper.SetDefault(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;junior&quot;</span>)<br><br><span class="hljs-comment">//获取配置值</span><br>res := viper.GetString(<span class="hljs-string">&quot;Postgres.Port&quot;</span>)<br>fmt.Printf(res)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logrus"><a href="#logrus" class="headerlink" title="logrus"></a>logrus</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>)<br><br><span class="hljs-comment">// 创建一个新的logger实例。可以创建任意多个。</span><br><span class="hljs-keyword">var</span> log = logrus.New()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 设置日志输出为os.Stdout:输出到控制台</span><br>log.Out = os.Stdout<br><br><span class="hljs-comment">// 设置日志输出到文件</span><br>file, err := os.OpenFile(<span class="hljs-string">&quot;logrus.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>log.Out = file<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Info(<span class="hljs-string">&quot;Failed to log to file, using default stderr&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//打印日志</span><br>log.WithFields(logrus.Fields&#123;<br><span class="hljs-string">&quot;animal&quot;</span>: <span class="hljs-string">&quot;dog&quot;</span>,<br><span class="hljs-string">&quot;size&quot;</span>:   <span class="hljs-number">10</span>,<br>&#125;).Info(<span class="hljs-string">&quot;一群舔狗出现了。&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logrus-hook函数例子"><a href="#logrus-hook函数例子" class="headerlink" title="logrus - hook函数例子"></a>logrus - hook函数例子</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>   <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   log.AddHook(&amp;MyHook&#123;&#125;)<br>   log.Error(<span class="hljs-string">&quot;some errors\n&quot;</span>)<br>   log.Panic(<span class="hljs-string">&quot;some panic\n&quot;</span>)<br>   log.Print(<span class="hljs-string">&quot;hello world\n&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// MyHook ...</span><br><span class="hljs-keyword">type</span> MyHook <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-comment">// Levels 只定义 error 和 panic 等级的日志,其他日志等级不会触发 hook</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *MyHook)</span> <span class="hljs-title">Levels</span><span class="hljs-params">()</span> []<span class="hljs-title">log</span>.<span class="hljs-title">Level</span></span> &#123;<br>   <span class="hljs-keyword">return</span> []log.Level&#123;<br>      log.ErrorLevel,<br>      log.PanicLevel,<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// Fire 将异常日志写入到指定日志文件中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *MyHook)</span> <span class="hljs-title">Fire</span><span class="hljs-params">(entry *log.Entry)</span> <span class="hljs-title">error</span></span> &#123;<br>   f, err := os.OpenFile(<span class="hljs-string">&quot;err.log&quot;</span>, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="hljs-number">0644</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">if</span> _, err := f.Write([]<span class="hljs-keyword">byte</span>(entry.Message)); err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每次有error,panic 错误时，会写入 err.log 日志文件</strong><br><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210507110659074.png" alt="image-20210507110659074"></p><h4 id="path-filepath-操作路径"><a href="#path-filepath-操作路径" class="headerlink" title="path/filepath - 操作路径"></a>path/filepath - 操作路径</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">//路径拼接</span><br><span class="hljs-comment">//D:\WorkPlace\go\go_junior\storage\logs</span><br><span class="hljs-keyword">return</span> filepath.Join(storageDir(), <span class="hljs-string">&quot;logs&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">storageDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(appDir(), <span class="hljs-string">&quot;storage&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">//返回当前目录的根路径</span><br>    <span class="hljs-comment">//D:\WorkPlace\go\go_junior</span><br>path_, err := os.Getwd()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> path_<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>path := <span class="hljs-string">&quot;./dir1/dir2/tes.log&quot;</span><br><br>res := filepath.Dir(path)<span class="hljs-comment">//目录</span><br>res1 := filepath.Base(path)<span class="hljs-comment">//文件</span><br>res2 := filepath.Ext(path)<span class="hljs-comment">//文件后缀</span><br>fmt.Println(res)<br>fmt.Println(res1)<br>fmt.Println(res2)<br><br>res3, _ := filepath.Abs(path)<span class="hljs-comment">//绝对路径</span><br>fmt.Println(res3)<br>fmt.Println(filepath.IsAbs(path))<span class="hljs-comment">//是否是绝对路径</span><br>fmt.Println(filepath.Rel(<span class="hljs-string">&quot;./ceshi&quot;</span>, path))<span class="hljs-comment">//当前文件相对ceshi目录的相对路径 </span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="os-系统操作"><a href="#os-系统操作" class="headerlink" title="os - 系统操作"></a>os - 系统操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// os.MkdirAll 用于递归创建所有不存在的目录</span><br>_ = os.MkdirAll(storageDir(), os.ModePerm)<br>_ = os.MkdirAll(logDir(), os.ModePerm)<br>    <br>   <br>    <span class="hljs-comment">// 创建目录</span><br>    err = os.MkdirAll(dir+<span class="hljs-string">&quot;/new&quot;</span>, <span class="hljs-number">0755</span>)<br>    fmt.Println(err)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(storageDir(), <span class="hljs-string">&quot;logs&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">storageDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(appDir(), <span class="hljs-string">&quot;storage&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>path_, err := os.Getwd()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> path_<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World 这是标题</title>
    <link href="/2021/06/22/hello-world/"/>
    <url>/2021/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
