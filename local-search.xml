<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo博客部署更新</title>
    <link href="/2021/07/19/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/07/19/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo博客部署更新"><a href="#hexo博客部署更新" class="headerlink" title="hexo博客部署更新"></a>hexo博客部署更新</h2><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><code>hexo_blog</code> 为源markdown 文件</p><p><code>junior_blog.GitHub.io</code> 为生成的静态文件</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719143054091.png" alt="image-20210719143054091"></p><p>编写markdown 文件后，将文件保存至  <code>/source/_posts</code>   目录</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719143305266.png" alt="image-20210719143305266"></p><p>到项目根目录使用命令 <code>hexo g -d</code> 会自动生成静态文件，并上传至静态文件git地址 </p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/hexo/image-20210719145433820.png" alt="image-20210719145433820"></p><p>将本地修改推送至源文件目录地址，保存源文件记录</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/15/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/"/>
    <url>/2021/07/15/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"><a href="#title-四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构" class="headerlink" title="title:四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"></a>title:四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构</h2><h1 id="四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"><a href="#四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构" class="headerlink" title="四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构"></a>四种软件架构：单体架构、分布式架构、微服务架构、Serverless架构</h1><p> Posted on 2019-03-23 | 1510</p><p> Words count in article: 3.4k | Reading time ≈ 11</p><h3 id="一、单体架构"><a href="#一、单体架构" class="headerlink" title="一、单体架构"></a>一、单体架构</h3><p>  单体架构比较初级，典型的三级架构，前端(Web/手机端)+中间业务逻辑层+数据库层。这是一种典型的Java Spring mvc或者Python Django框架的应用。其架构图如下所示：</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/1.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/1.png" alt="img"></a></p><p> 单体架构的应用比较容易部署、测试， 在项目的初期，单体应用可以很好地运行。然而，随着需求的不断增加， 越来越多的人加入开发团队，代码库也在飞速地膨胀。慢慢地，单体应用变得越来越臃肿，可维护性、灵活性逐渐降低，维护成本越来越高。下面是单体架构应用的一些缺点：</p><ul><li><strong>复杂性高</strong>： 以一个百万行级别的单体应用为例，整个项目包含的模块非常多、模块的边界模糊、 依赖关系不清晰、 代码质量参差不齐、 混乱地堆砌在一起。可想而知整个项目非常复杂。 每次修改代码都心惊胆战， 甚至添加一个简单的功能， 或者修改一个Bug都会带来隐含的缺陷。</li><li><strong>技术债务</strong>： 随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务， 并且越积 越多。“ 不坏不修”， 这在软件开发中非常常见， 在单体应用中这种思想更甚。 已使用的系统设计或代码难以被修改，因为应用程序中的其他模块可能会以意料之外的方式使用它。</li><li><strong>部署频率低</strong>： 随着代码的增多，构建和部署的时间也会增加。而在单体应用中， 每次功能的变更或缺陷的修复都会导致需要重新部署整个应用。全量部署的方式耗时长、 影响范围大、 风险高， 这使得单体应用项目上线部署的频率较低。 而部署频率低又导致两次发布之间会有大量的功能变更和缺陷修复，出错率比较高。<br>可靠性差： 某个应用Bug，例如死循环、内存溢出等， 可能会导致整个应用的崩溃。</li><li><strong>扩展能力受限</strong>： 单体应用只能作为一个整体进行扩展，无法根据业务模块的需要进行伸缩。例如，应用中有的模块是计算密集型的，它需要强劲的CPU； 有的模块则是IO密集型的，需要更大的内存。 由于这些模块部署在一起，不得不在硬件的选择上做出妥协。</li><li><strong>阻碍技术创新</strong>： 单体应用往往使用统一的技术平台或方案解决所有的问题， 团队中的每个成员 都必须使用相同的开发语言和框架，要想引入新框架或新技术平台会非常困难。</li></ul><h3 id="二、分布式应用"><a href="#二、分布式应用" class="headerlink" title="二、分布式应用"></a>二、分布式应用</h3><p>  中级架构，分布式应用，中间层分布式+数据库分布式，是单体架构的并发扩展，将一个大的系统划分为多个业务模块，业务模块分别部署在不同的服务器上，各个业务模块之间通过接口进行数据交互。数据库也大量采用分布式数据库，如redis、ES、solor等。通过LVS/Nginx代理应用，将用户请求均衡的负载到不同的服务器上。其架构图如下所示：</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/2.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/2.png" alt="img"></a></p><p>  该架构相对于单体架构来说，这种架构提供了负载均衡的能力，大大提高了系统负载能力，解决了网站高并发的需求。另外还有以下特点：</p><ul><li><strong>降低了耦合度</strong>：把模块拆分,使用接口通信,降低模块之间的耦合度。</li><li><strong>责任清晰</strong>：把项目拆分成若干个子项目,不同的团队负责不同的子项目。</li><li><strong>扩展方便</strong>：增加功能时只需要再增加一个子项目,调用其他系统的接口就可以。</li><li><strong>部署方便</strong>:可以灵活的进行分布式部署。</li><li><strong>提高代码的复用</strong>性：比如service层,如果不采用分布式rest服务方式架构就会在手机wap商城,微信商城,pc,android，ios每个端都要写一个service层逻辑,开发量大,难以维护一起升级,这时候就可以采用分布式rest服务方式,公用一个service层。</li><li><strong>缺点</strong> : 系统之间的交互要使用远程通信,接口开发增大工作量,但是利大于弊。</li></ul><h3 id="三、微服务架构"><a href="#三、微服务架构" class="headerlink" title="三、微服务架构"></a>三、微服务架构</h3><p>微服务架构，主要是中间层分解，将系统拆分成很多小应用（微服务），微服务可以部署在不同的服务器上，也可以部署在相同的服务器不同的容器上。当应用的故障不会影响到其他应用，单应用的负载也不会影响到其他应用，其代表框架有Spring cloud、Dubbo等。 其架构图如下所示：</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/3.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/3.png" alt="img"></a></p><ul><li><strong>易于开发和维护</strong>： 一个微服务只会关注一个特定的业务功能，所以它业务清晰、代码量较少。 开发和维护单个微服务相对简单。而整个应用是由若干个微服务构建而成的，所以整个应用也会被维持在一个可控状态。</li><li><strong>单个微服务启动较快</strong>： 单个微服务代码量较少， 所以启动会比较快。</li><li><strong>局部修改容易部署</strong>： 单体应用只要有修改，就得重新部署整个应用，微服务解决了这样的问题。 一般来说，对某个微服务进行修改，只需要重新部署这个服务即可。</li><li><strong>技术栈不受限</strong>：在微服务架构中，可以结合项目业务及团队的特点，合理地选择技术栈。例如某些服务可使用关系型数据库MySQL；某些微服务有图形计算的需求，可以使用Neo4j；甚至可根据需要，部分微服务使用Java开发，部分微服务使用Node.js开发。</li></ul><p>  微服务虽然有很多吸引人的地方，但它并不是免费的午餐，使用它是有代价的。使用微服务架构面临的挑战。</p><ul><li><strong>运维要求较高</strong>：更多的服务意味着更多的运维投入。在单体架构中，只需要保证一个应用的正常运行。而在微服务中，需要保证几十甚至几百个服务服务的正常运行与协作，这给运维带来了很大的挑战。</li><li><strong>分布式固有的复杂性</strong>：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延迟、分布式事务等都会带来巨大的挑战。</li><li><strong>接口调整成本高</strong>：微服务之间通过接口进行通信。如果修改某一个微服务的API，可能所有使用了该接口的微服务都需要做调整。</li><li><strong>重复劳动</strong>：很多服务可能都会使用到相同的功能，而这个功能并没有达到分解为一个微服务的程度，这个时候，可能各个服务都会开发这一功能，从而导致代码重复。尽管可以使用共享库来解决这个问题（例如可以将这个功能封装成公共组件，需要该功能的微服务引用该组件），但共享库在多语言环境下就不一定行得通了。</li></ul><h3 id="四、Serverless架构"><a href="#四、Serverless架构" class="headerlink" title="四、Serverless架构"></a>四、Serverless架构</h3><p>当我们还在容器的浪潮中前行时，已经有一些革命先驱悄然布局另外一个云计算战场：Serverless架构。</p><p><a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/4.png"><img src="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/4.png" alt="img"></a></p><p>  2014年11月14日，亚马逊AWS发布了新产品Lambda。当时Lambda被描述为：一种计算服务，根据时间运行用户的代码，无需关心底层的计算资源。从某种意义上来说，Lambda姗姗来迟，它像云计算的PaaS理念：客户只管业务，无需担心存储和计算资源。在此前不久，2014年10月22日，谷歌收购了实时后端数据库创业公司Firebase。Firebase声称开发者只需引用一个API库文件就可以使用标准REST API的各种接口对数据进行读写操作，只需编写HTML＋CSS＋JavaScrip前端代码，不需要服务器端代码（如需整合，也极其简单）。</p><p>  相对于上两者，Facebook 在2014年二月收购的 Parse，则侧重于提供一个通用的后台服务。这些服务被称为Serverless或no sever。想到PaaS（平台即服务）了是吗？很像，用户不需要关心基础设施，只需要关心业务，这是迟到的PaaS，也是更实用的PaaS。这很有可能将会变革整个开发过程和传统的应用生命周期，一旦开发者们习惯了这种全自动的云上资源的创建和分配，或许就再也回不到那些需要微应用配置资源的时代里去了。</p><p>  Serverless架构能够让开发者在构建应用的过程中无需关注计算资源的获取和运维，由平台来按需分配计算资源并保证应用执行的SLA（服务等级协议），按照调用次数进行计费，有效的节省应用成本。ServerLess的架构如上图所示。其优点如下所示：</p><ul><li><strong>低运营成本</strong>：在业务突发性极高的场景下，系统为了应对业务高峰，必须构建能够应对峰值需求的系统，这个系统在大部分时间是空闲的，这就导致了严重的资源浪费和成本上升。在微服务架构中，服务需要一直运行，实际上在高负载情况下每个服务都不止一个实例，这样才能完成高可用性；在Serverless架构下，服务将根据用户的调用次数进行计费，按照云计算pay-as-you-go原则，如果没有东西运行，你就不必付款，节省了使用成本。同时，用户能够通过共享网络、硬盘、CPU等计算资源，在业务高峰期通过弹性扩容方式有效的应对业务峰值，在业务波谷期将资源分享给其他用户，有效的节约了成本。</li><li><strong>简化设备运维</strong>：在原有的IT体系中，开发团队即需要维护应用程序，同时还要维护硬件基础设施；Serverless架构中，开发人员面对的将是第三方开发或自定义的API 和URL，底层硬件对于开发人员透明化了，技术团队无需再关注运维工作，能够更加专注于应用系统开发。</li><li><strong>提升可维护性</strong>：Serverless架构中，应用程序将调用多种第三方功能服务，组成最终的应用逻辑。目前，例如登陆鉴权服务，云数据库服务等第三方服务在安全性、可用性、性能方面都进行了大量优化，开发团队直接集成第三方的服务，能够有效的降低开发成本，同时使得应用的运维过程变得更加清晰，有效的提升了应用的可维护性。</li><li><strong>更快的开发速度</strong>：这一点在现在互联网创业公司得到很好的体现，创业公司往往开始由于人员和资金等问题，不可能每个产品线都同时进行，这时候就可以考虑第三方的Baas平台，比如使用微信的用户认证、阿里云提供的RDS，极光的消息推送，第三方支付及地理位置等等，能够很快进行产品开发的速度，把工作重点放在业务实现上，把产品更快的推向市场。<br>但ServerLess架构也有其缺点：</li><li><strong>厂商平台绑定</strong>：平台会提供Serverless架构给大玩家，比如AWS Lambda，运行它需要使用AWS指定的服务，比如API网关，DynamoDB，S3等等，一旦你在这些服务上开发一个复杂系统，你会粘牢AWS，以后只好任由他们涨价定价或者下架等操作，个性化需求很难满足，不能进行随意的迁移或者迁移的成本比较大，同时不可避免带来一些损失。Baas行业内一个比较典型的事件，2016年1月19日Facebook关闭曾经花巨额资金收购的Parse，造成用户不得不迁移在这个平台中产生一年多的数据，无疑需要花费比较大的人力和时间成本。</li><li><strong>成功案例比较少，没有行业标准</strong>：目前的情况也只适合简单的应用开发，缺乏大型成功案例的推动。对于Serverless缺乏统一的认知以及相应的标准，无法适应所有的云平台。</li></ul><p>  目前微服务架构在四种架构中处于主流地位，很多应用第一、第二种架构的企业也开始慢慢转向微服务架构。到目前为止微服务的技术相对于二三年前已经比较成熟，第四种架构将是未来发展的一种趋势。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">原文链接：https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span>e7b992a82dc0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用</title>
    <link href="/2021/06/22/hexo/"/>
    <url>/2021/06/22/hexo/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><span class="hljs-comment">#让 Hexo 在生成完毕后自动部署网站</span><br>$ hexo generate --deploy<br>$ hexo deploy --generate<br><span class="hljs-comment">#简写上面两个命令可以简写为</span><br>$ hexo g -d<br>$ hexo d -g<br><br><span class="hljs-comment">#使用 Hexo 生成静态文件</span><br>$ hexo generate<br>$ hexo g<br><br><span class="hljs-comment">#启动服务器。默认情况下，访问网址为： http://localhost:4000/</span><br>$ hexo server<br><br><span class="hljs-comment">#部署网址</span><br>$ hexo d<br><br><span class="hljs-comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="hljs-comment">#在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</span><br>$ hexo clean<br><br><br><br>$ hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>如图显示表示部署成功</p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/image-20210622145150706.png" alt="image-20210622145150706"></p><p><img src="https://gitee.com/junior2018/mark_down/raw/master/go/image-20210622145125975.png" alt="image-20210622145125975"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go 基础只是</title>
    <link href="/2021/06/22/GO/"/>
    <url>/2021/06/22/GO/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> path<br><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> 引入包安装目录 <br><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span> tidy  //安装包<br><br><span class="hljs-built_in">go</span> 调度器  MPG 模型<br><br><span class="hljs-number">1.</span><span class="hljs-built_in">go</span>的安装跟gopath的设置<br><span class="hljs-number">2.</span><span class="hljs-built_in">go</span> <span class="hljs-built_in">mod</span>介绍使用<br><span class="hljs-number">3.</span><span class="hljs-built_in">go</span>的调度器 MPG模型<br><span class="hljs-number">4.</span>channel goroutine简介<br><span class="hljs-number">5</span>.每分钟处理百万级请求 <br><span class="hljs-number">6.</span>web框架gin介绍<br><br></code></pre></td></tr></table></figure><p>Go 调度器 GMP 原理与调度</p><p>数组切片</p><p>map</p><p>struct 结构体</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//Go语言主要有四种类型的声明语句：var、const、type和func，</span><br><span class="hljs-comment">//分别对应变量、常量、类型和函数实体对象的声明</span><br><br><br><span class="hljs-comment">//一次性声明多个常量</span><br><span class="hljs-keyword">const</span> freezingF, boilingF = <span class="hljs-number">32.0</span>, <span class="hljs-number">212.0</span><br><br><br></code></pre></td></tr></table></figure><p>变量声明后，默认使用零值进行变量初始化</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组声明需要定义长度，也可以使用 … 定义自适应长度</p><p><strong>数组的索引值只能是 int</strong>，索引下标的范围是从0开始到数组长度减1的位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//数组声明</span><br><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>             <span class="hljs-comment">// array of 3 integers</span><br>fmt.Println(a[<span class="hljs-number">0</span>])        <span class="hljs-comment">// print the first element</span><br>fmt.Println(a[<span class="hljs-built_in">len</span>(a)<span class="hljs-number">-1</span>]) <span class="hljs-comment">// print the last element, a[2]</span><br><br><br><span class="hljs-comment">//数组遍历</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, v)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>, v)<br>&#125;<br><br><br><span class="hljs-comment">//数组声明并初始化</span><br>q := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>b := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> go env</span>  <br><span class="hljs-meta">#</span><span class="bash">查看 GOROOT (go 安装目录,go 自带的包会在这个目录，如fmt 包)</span><br><span class="hljs-meta">#</span><span class="bash">GOPATH (go get 安装的包会在此目录)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> go env -w GO111MODULE=on   <span class="hljs-comment"># 打开 Go modules 开关</span></span><br><span class="hljs-meta">$</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct  <span class="hljs-comment">#设置 GOPROXY 代理</span></span><br></code></pre></td></tr></table></figure><p>GoLand  需要设置GOROOT 才会显示</p><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210119144217025.png" alt="image-20210119144217025"></p><ul><li>Go Modules 简介</li></ul><p>go-ini/ini   配置文件读取</p><p>gorm </p><p>net/http</p><p>gin</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">【github.com/<span class="hljs-keyword">go</span>-ini/ini】<br>【配置文件.ini】<br>【读取配置文件方法】<br><br>【错误码code】<br>【错误信息msg 文件】<br><br>【分页页码的获取方法】<br><br><br>**model 数据库模型 **<br><br>**编写路由文件 **<br><br></code></pre></td></tr></table></figure><p>go 定时任务</p><p>如何保证定时任务自动重启（守护进程如何配置 supervis）</p><p>项目初始化</p><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210427162611082.png" alt="image-20210427162611082"></p><h4 id="函数，方法"><a href="#函数，方法" class="headerlink" title="函数，方法"></a>函数，方法</h4><p>函数：</p><p>方法：在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// traditional function</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Distance</span><span class="hljs-params">(p, q Point)</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br><br><span class="hljs-comment">// same thing, but as a method of the Point type</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Point)</span> <span class="hljs-title">Distance</span><span class="hljs-params">(q Point)</span> <span class="hljs-title">float64</span></span> &#123;<br>    <span class="hljs-keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h4><ul><li>init函数先于main函数自动执行，不能被其他函数调用；</li><li>init函数没有输入参数、返回值；</li><li>每个包可以有多个init函数；</li><li><strong>包的每个源文件也可以有多个init函数</strong>，这点比较特殊；</li><li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序。</li><li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main                       <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> T <span class="hljs-keyword">int64</span> = a()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;init in main.go &quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;calling a()&quot;</span>)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;                  <br>   fmt.Println(<span class="hljs-string">&quot;calling main&quot;</span>)     <br>&#125;<br><br><span class="hljs-comment">//结果</span><br>calling a()<br>init in main.<span class="hljs-keyword">go</span><br>calling main<br><span class="hljs-comment">// 初始化顺序：变量初始化-&gt;init()-&gt;main()</span><br></code></pre></td></tr></table></figure><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//定义结构体：（定义了一个person结构体）</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>city <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int8</span><br>&#125;<br><br><br><span class="hljs-comment">//-------实例化</span><br><br><span class="hljs-comment">//结构体实例化：只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</span><br><span class="hljs-keyword">var</span> p1 person<br>p1.name = <span class="hljs-string">&quot;沙河娜扎&quot;</span><br><br><span class="hljs-comment">//创建指针类型结构体</span><br><span class="hljs-keyword">var</span> p2 = <span class="hljs-built_in">new</span>(person)<br><br><span class="hljs-comment">//取结构体的地址实例化</span><br>p3 := &amp;person&#123;&#125;<br>p3.name = <span class="hljs-string">&quot;七米&quot;</span>   <span class="hljs-comment">// p3.name = &quot;七米&quot;其实在底层是 (*p3).name = &quot;七米&quot;</span><br><br><br><br><span class="hljs-comment">//----初始化</span><br><br><span class="hljs-comment">//没有初始化的结构体，其成员变量都是对应其类型的零值。</span><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>city <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int8</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> p4 person<br>fmt.Printf(<span class="hljs-string">&quot;p4=%#v\n&quot;</span>, p4) <span class="hljs-comment">//p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br>&#125;<br><br><span class="hljs-comment">//键值对初始化</span><br>p5 := person&#123;<br>name: <span class="hljs-string">&quot;小王子&quot;</span>,<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//结构体指针进行键值对初始化</span><br>p6 := &amp;person&#123;<br>name: <span class="hljs-string">&quot;小王子&quot;</span>,<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br><span class="hljs-comment">//省略字段初始化</span><br>p7 := &amp;person&#123;<br>city: <span class="hljs-string">&quot;北京&quot;</span>,<br>&#125;<br><br><br><span class="hljs-comment">//使用值的列表初始化</span><br><span class="hljs-comment">//必须初始化结构体的所有字段。</span><br><span class="hljs-comment">//初始值的填充顺序必须与字段在结构体中的声明顺序一致。</span><br><span class="hljs-comment">//该方式不能和键值初始化方式混用。</span><br>p8 := &amp;person&#123;<br><span class="hljs-string">&quot;沙河娜扎&quot;</span>,<br><span class="hljs-string">&quot;北京&quot;</span>,<br><span class="hljs-number">28</span>,<br>&#125;<br><br><br><span class="hljs-comment">//空结构体是不占用空间的。</span><br><span class="hljs-keyword">var</span> v <span class="hljs-keyword">struct</span>&#123;&#125;<br>fmt.Println(unsafe.Sizeof(v))  <span class="hljs-comment">// 0</span><br><br><br></code></pre></td></tr></table></figure><p>思考</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> student <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>age  <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*student)<br>stus := []student&#123;<br>&#123;name: <span class="hljs-string">&quot;小王子&quot;</span>, age: <span class="hljs-number">18</span>&#125;,<br>&#123;name: <span class="hljs-string">&quot;娜扎&quot;</span>, age: <span class="hljs-number">23</span>&#125;,<br>&#123;name: <span class="hljs-string">&quot;大王八&quot;</span>, age: <span class="hljs-number">9000</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, stu := <span class="hljs-keyword">range</span> stus &#123;<br>m[stu.name] = &amp;stu<br>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>fmt.Println(k, <span class="hljs-string">&quot;=&gt;&quot;</span>, v.name)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p><code>&amp;</code>（取地址，即指针）和<code>*</code>（根据地址取值，即指针取值）</p><p>取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">10</span><br>b := &amp;a<br>    fmt.Println(b)  <span class="hljs-comment">// 0xc00000a0c0  (&amp;取地址)</span><br>c := *b <span class="hljs-comment">// 指针取值（根据指针去内存取值）</span><br>fmt.Println(c) <span class="hljs-comment">// 10 （*根据地址取值）</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>引用类型的变量</strong>，我们在使用的时候不仅要<strong>声明它</strong>，还要为它<strong>分配内存</strong>空间，否则我们的值就没办法存储</p><p>而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存。</p><h3 id="new与make的区别"><a href="#new与make的区别" class="headerlink" title="new与make的区别"></a>new与make的区别</h3><ol><li>二者都是用来做内存分配的。</li><li>make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</li><li>而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</li></ol><h4 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 interface"></a>接口 interface</h4><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//日志格式</span><br>log.SetFlags(log.Llongfile | log.Ltime | log.Ldate)<br>    <span class="hljs-comment">//日志前缀</span><br>log.SetPrefix(<span class="hljs-string">&quot;[小黑子]&quot;</span>)<br>    <span class="hljs-comment">//日志输出位置</span><br>logFile,err := os.OpenFile(<span class="hljs-string">&quot;junior.log&quot;</span>,os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0644</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>log.SetOutput(logFile)<br>    <span class="hljs-comment">//打印日志</span><br>log.Println(<span class="hljs-string">&quot;这是一个普通日志&quot;</span>)<br><br><br><span class="hljs-comment">//自定义日志：输出位置，日志前缀，日志格式</span><br>logger := log.New(os.Stdout, <span class="hljs-string">&quot;&lt;New&gt;&quot;</span>, log.Lshortfile|log.Ldate|log.Ltime)<br>logger.Println(<span class="hljs-string">&quot;这是自定义的logger记录的日志。&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210506112305732.png" alt="image-20210506112305732"></p><h4 id="viper-go配置"><a href="#viper-go配置" class="headerlink" title="viper -go配置"></a>viper -go配置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//读取配置文件</span><br>viper.SetConfigFile(<span class="hljs-string">&quot;./config.toml&quot;</span>)<br>err := viper.ReadInConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-comment">//设置默认值</span><br>viper.SetDefault(<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;junior&quot;</span>)<br><br><span class="hljs-comment">//获取配置值</span><br>res := viper.GetString(<span class="hljs-string">&quot;Postgres.Port&quot;</span>)<br>fmt.Printf(res)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logrus"><a href="#logrus" class="headerlink" title="logrus"></a>logrus</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>)<br><br><span class="hljs-comment">// 创建一个新的logger实例。可以创建任意多个。</span><br><span class="hljs-keyword">var</span> log = logrus.New()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 设置日志输出为os.Stdout:输出到控制台</span><br>log.Out = os.Stdout<br><br><span class="hljs-comment">// 设置日志输出到文件</span><br>file, err := os.OpenFile(<span class="hljs-string">&quot;logrus.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>log.Out = file<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Info(<span class="hljs-string">&quot;Failed to log to file, using default stderr&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//打印日志</span><br>log.WithFields(logrus.Fields&#123;<br><span class="hljs-string">&quot;animal&quot;</span>: <span class="hljs-string">&quot;dog&quot;</span>,<br><span class="hljs-string">&quot;size&quot;</span>:   <span class="hljs-number">10</span>,<br>&#125;).Info(<span class="hljs-string">&quot;一群舔狗出现了。&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logrus-hook函数例子"><a href="#logrus-hook函数例子" class="headerlink" title="logrus - hook函数例子"></a>logrus - hook函数例子</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   log <span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><br>   <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   log.AddHook(&amp;MyHook&#123;&#125;)<br>   log.Error(<span class="hljs-string">&quot;some errors\n&quot;</span>)<br>   log.Panic(<span class="hljs-string">&quot;some panic\n&quot;</span>)<br>   log.Print(<span class="hljs-string">&quot;hello world\n&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// MyHook ...</span><br><span class="hljs-keyword">type</span> MyHook <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-comment">// Levels 只定义 error 和 panic 等级的日志,其他日志等级不会触发 hook</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *MyHook)</span> <span class="hljs-title">Levels</span><span class="hljs-params">()</span> []<span class="hljs-title">log</span>.<span class="hljs-title">Level</span></span> &#123;<br>   <span class="hljs-keyword">return</span> []log.Level&#123;<br>      log.ErrorLevel,<br>      log.PanicLevel,<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// Fire 将异常日志写入到指定日志文件中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *MyHook)</span> <span class="hljs-title">Fire</span><span class="hljs-params">(entry *log.Entry)</span> <span class="hljs-title">error</span></span> &#123;<br>   f, err := os.OpenFile(<span class="hljs-string">&quot;err.log&quot;</span>, os.O_RDWR|os.O_CREATE|os.O_APPEND, <span class="hljs-number">0644</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">if</span> _, err := f.Write([]<span class="hljs-keyword">byte</span>(entry.Message)); err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每次有error,panic 错误时，会写入 err.log 日志文件</strong><br><img src="C:\Users\xiaoe\AppData\Roaming\Typora\typora-user-images\image-20210507110659074.png" alt="image-20210507110659074"></p><h4 id="path-filepath-操作路径"><a href="#path-filepath-操作路径" class="headerlink" title="path/filepath - 操作路径"></a>path/filepath - 操作路径</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">//路径拼接</span><br><span class="hljs-comment">//D:\WorkPlace\go\go_junior\storage\logs</span><br><span class="hljs-keyword">return</span> filepath.Join(storageDir(), <span class="hljs-string">&quot;logs&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">storageDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(appDir(), <span class="hljs-string">&quot;storage&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">//返回当前目录的根路径</span><br>    <span class="hljs-comment">//D:\WorkPlace\go\go_junior</span><br>path_, err := os.Getwd()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> path_<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>path := <span class="hljs-string">&quot;./dir1/dir2/tes.log&quot;</span><br><br>res := filepath.Dir(path)<span class="hljs-comment">//目录</span><br>res1 := filepath.Base(path)<span class="hljs-comment">//文件</span><br>res2 := filepath.Ext(path)<span class="hljs-comment">//文件后缀</span><br>fmt.Println(res)<br>fmt.Println(res1)<br>fmt.Println(res2)<br><br>res3, _ := filepath.Abs(path)<span class="hljs-comment">//绝对路径</span><br>fmt.Println(res3)<br>fmt.Println(filepath.IsAbs(path))<span class="hljs-comment">//是否是绝对路径</span><br>fmt.Println(filepath.Rel(<span class="hljs-string">&quot;./ceshi&quot;</span>, path))<span class="hljs-comment">//当前文件相对ceshi目录的相对路径 </span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="os-系统操作"><a href="#os-系统操作" class="headerlink" title="os - 系统操作"></a>os - 系统操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// os.MkdirAll 用于递归创建所有不存在的目录</span><br>_ = os.MkdirAll(storageDir(), os.ModePerm)<br>_ = os.MkdirAll(logDir(), os.ModePerm)<br>    <br>   <br>    <span class="hljs-comment">// 创建目录</span><br>    err = os.MkdirAll(dir+<span class="hljs-string">&quot;/new&quot;</span>, <span class="hljs-number">0755</span>)<br>    fmt.Println(err)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">logDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(storageDir(), <span class="hljs-string">&quot;logs&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">storageDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> filepath.Join(appDir(), <span class="hljs-string">&quot;storage&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appDir</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>path_, err := os.Getwd()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> path_<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World 这是标题</title>
    <link href="/2021/06/22/hello-world/"/>
    <url>/2021/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
